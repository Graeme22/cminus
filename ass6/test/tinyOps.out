====================================
RUN: tinyOps.c-
Var y: array of type int [mem: Global  size: 11  loc: -1] [line: 4]
Sibling: 1  Var x: type bool [mem: Global  size: 1  loc: -11] [line: 5]
Sibling: 2  Func main: returns type void [line: 7]
.   Child: 1  Compound [line: 8]
.   .   Child: 0  Var a: type int [mem: Local  size: 1  loc: -2] [line: 9]
.   .   Sibling: 1  Var b: type int [mem: Local  size: 1  loc: -3] [line: 10]
.   .   Sibling: 2  Var c: type int [mem: Local  size: 1  loc: -4] [line: 11]
.   .   Sibling: 3  Var z: type bool [mem: Local  size: 1  loc: -5] [line: 12]
.   .   Child: 1  Assign = : type int [line: 14]
.   .   .   Child: 0  Op [ : type int [line: 14]
.   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 14]
.   .   .   .   Child: 1  Const 0 : type int [line: 14]
.   .   .   Child: 1  Const 50 : type int [line: 14]
.   .   Sibling: 1  Assign = : type int [line: 15]
.   .   .   Child: 0  Op [ : type int [line: 15]
.   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 15]
.   .   .   .   Child: 1  Const 5 : type int [line: 15]
.   .   .   Child: 1  Const 1 : type int [line: 15]
.   .   Sibling: 2  Assign = : type int [line: 16]
.   .   .   Child: 0  Op [ : type int [line: 16]
.   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 16]
.   .   .   .   Child: 1  Const 8 : type int [line: 16]
.   .   .   Child: 1  Const 2 : type int [line: 16]
.   .   Sibling: 3  Assign = : type int [line: 18]
.   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 18]
.   .   .   Child: 1  Const 50 : type int [line: 18]
.   .   Sibling: 4  Assign = : type int [line: 19]
.   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 19]
.   .   .   Child: 1  Const 1 : type int [line: 19]
.   .   Sibling: 5  Assign = : type int [line: 20]
.   .   .   Child: 0  Id c: type int [mem: Local  size: 1  loc: -4] [line: 20]
.   .   .   Child: 1  Const 8 : type int [line: 20]
.   .   Sibling: 6  Assign = : type bool [line: 22]
.   .   .   Child: 0  Id x: type bool [mem: Global  size: 1  loc: -11] [line: 22]
.   .   .   Child: 1  Const false : type bool [line: 22]
.   .   Sibling: 7  Assign = : type bool [line: 23]
.   .   .   Child: 0  Id z: type bool [mem: Local  size: 1  loc: -5] [line: 23]
.   .   .   Child: 1  Const true : type bool [line: 23]
.   .   Sibling: 8  Call outputb: type void [line: 25]
.   .   .   Child: 0  Op <= : type bool [line: 25]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 25]
.   .   .   .   Child: 1  Const 1 : type int [line: 25]
.   .   Sibling: 9  Call outputb: type void [line: 26]
.   .   .   Child: 0  Op <= : type bool [line: 26]
.   .   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 26]
.   .   .   .   Child: 1  Const 50 : type int [line: 26]
.   .   Sibling: 10  Call outputb: type void [line: 27]
.   .   .   Child: 0  Op <= : type bool [line: 27]
.   .   .   .   Child: 0  Const 50 : type int [line: 27]
.   .   .   .   Child: 1  Const 50 : type int [line: 27]
.   .   Sibling: 11  Call outnl: type void [line: 28]
.   .   Sibling: 12  Call outputb: type void [line: 30]
.   .   .   Child: 0  Op < : type bool [line: 30]
.   .   .   .   Child: 0  Const 50 : type int [line: 30]
.   .   .   .   Child: 1  Const 1 : type int [line: 30]
.   .   Sibling: 13  Call outputb: type void [line: 31]
.   .   .   Child: 0  Op < : type bool [line: 31]
.   .   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 31]
.   .   .   .   Child: 1  Id a: type int [mem: Local  size: 1  loc: -2] [line: 31]
.   .   Sibling: 14  Call outputb: type void [line: 32]
.   .   .   Child: 0  Op < : type bool [line: 32]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 32]
.   .   .   .   Child: 1  Id a: type int [mem: Local  size: 1  loc: -2] [line: 32]
.   .   Sibling: 15  Call outnl: type void [line: 33]
.   .   Sibling: 16  Call outputb: type void [line: 35]
.   .   .   Child: 0  Op > : type bool [line: 35]
.   .   .   .   Child: 0  Const 50 : type int [line: 35]
.   .   .   .   Child: 1  Const 1 : type int [line: 35]
.   .   Sibling: 17  Call outputb: type void [line: 36]
.   .   .   Child: 0  Op > : type bool [line: 36]
.   .   .   .   Child: 0  Const 1 : type int [line: 36]
.   .   .   .   Child: 1  Const 50 : type int [line: 36]
.   .   Sibling: 18  Call outputb: type void [line: 37]
.   .   .   Child: 0  Op > : type bool [line: 37]
.   .   .   .   Child: 0  Const 50 : type int [line: 37]
.   .   .   .   Child: 1  Const 50 : type int [line: 37]
.   .   Sibling: 19  Call outnl: type void [line: 38]
.   .   Sibling: 20  Call outputb: type void [line: 40]
.   .   .   Child: 0  Op >= : type bool [line: 40]
.   .   .   .   Child: 0  Const 50 : type int [line: 40]
.   .   .   .   Child: 1  Const 1 : type int [line: 40]
.   .   Sibling: 21  Call outputb: type void [line: 41]
.   .   .   Child: 0  Op >= : type bool [line: 41]
.   .   .   .   Child: 0  Const 1 : type int [line: 41]
.   .   .   .   Child: 1  Const 50 : type int [line: 41]
.   .   Sibling: 22  Call outputb: type void [line: 42]
.   .   .   Child: 0  Op >= : type bool [line: 42]
.   .   .   .   Child: 0  Const 50 : type int [line: 42]
.   .   .   .   Child: 1  Const 50 : type int [line: 42]
.   .   Sibling: 23  Call outnl: type void [line: 43]
.   .   Sibling: 24  Call outputb: type void [line: 45]
.   .   .   Child: 0  Op == : type bool [line: 45]
.   .   .   .   Child: 0  Op [ : type int [line: 45]
.   .   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 45]
.   .   .   .   .   Child: 1  Const 0 : type int [line: 45]
.   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -3] [line: 45]
.   .   Sibling: 25  Call outputb: type void [line: 46]
.   .   .   Child: 0  Op == : type bool [line: 46]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 46]
.   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -3] [line: 46]
.   .   Sibling: 26  Call outputb: type void [line: 47]
.   .   .   Child: 0  Op == : type bool [line: 47]
.   .   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 47]
.   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -3] [line: 47]
.   .   Sibling: 27  Call outnl: type void [line: 48]
.   .   Sibling: 28  Call outputb: type void [line: 50]
.   .   .   Child: 0  Op != : type bool [line: 50]
.   .   .   .   Child: 0  Op [ : type int [line: 50]
.   .   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 50]
.   .   .   .   .   Child: 1  Const 0 : type int [line: 50]
.   .   .   .   Child: 1  Id a: type int [mem: Local  size: 1  loc: -2] [line: 50]
.   .   Sibling: 29  Call outputb: type void [line: 51]
.   .   .   Child: 0  Op != : type bool [line: 51]
.   .   .   .   Child: 0  Op [ : type int [line: 51]
.   .   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 51]
.   .   .   .   .   Child: 1  Const 0 : type int [line: 51]
.   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -3] [line: 51]
.   .   Sibling: 30  Call outputb: type void [line: 52]
.   .   .   Child: 0  Op != : type bool [line: 52]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 52]
.   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -3] [line: 52]
.   .   Sibling: 31  Call outputb: type void [line: 53]
.   .   .   Child: 0  Op != : type bool [line: 53]
.   .   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 53]
.   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -3] [line: 53]
.   .   Sibling: 32  Call outnl: type void [line: 54]
.   .   Sibling: 33  Call outputb: type void [line: 56]
.   .   .   Child: 0  Op & : type bool [line: 56]
.   .   .   .   Child: 0  Const true : type bool [line: 56]
.   .   .   .   Child: 1  Const true : type bool [line: 56]
.   .   Sibling: 34  Call outputb: type void [line: 57]
.   .   .   Child: 0  Op & : type bool [line: 57]
.   .   .   .   Child: 0  Const true : type bool [line: 57]
.   .   .   .   Child: 1  Const false : type bool [line: 57]
.   .   Sibling: 35  Call outputb: type void [line: 58]
.   .   .   Child: 0  Op & : type bool [line: 58]
.   .   .   .   Child: 0  Const false : type bool [line: 58]
.   .   .   .   Child: 1  Const true : type bool [line: 58]
.   .   Sibling: 36  Call outputb: type void [line: 59]
.   .   .   Child: 0  Op & : type bool [line: 59]
.   .   .   .   Child: 0  Const false : type bool [line: 59]
.   .   .   .   Child: 1  Const false : type bool [line: 59]
.   .   Sibling: 37  Call outnl: type void [line: 60]
.   .   Sibling: 38  Call outputb: type void [line: 62]
.   .   .   Child: 0  Op | : type bool [line: 62]
.   .   .   .   Child: 0  Const true : type bool [line: 62]
.   .   .   .   Child: 1  Const true : type bool [line: 62]
.   .   Sibling: 39  Call outputb: type void [line: 63]
.   .   .   Child: 0  Op | : type bool [line: 63]
.   .   .   .   Child: 0  Id z: type bool [mem: Local  size: 1  loc: -5] [line: 63]
.   .   .   .   Child: 1  Const false : type bool [line: 63]
.   .   Sibling: 40  Call outputb: type void [line: 64]
.   .   .   Child: 0  Op | : type bool [line: 64]
.   .   .   .   Child: 0  Const false : type bool [line: 64]
.   .   .   .   Child: 1  Const true : type bool [line: 64]
.   .   Sibling: 41  Call outputb: type void [line: 65]
.   .   .   Child: 0  Op | : type bool [line: 65]
.   .   .   .   Child: 0  Const false : type bool [line: 65]
.   .   .   .   Child: 1  Const false : type bool [line: 65]
.   .   Sibling: 42  Call outnl: type void [line: 66]
.   .   Sibling: 43  Call outputb: type void [line: 68]
.   .   .   Child: 0  Op ! : type bool [line: 68]
.   .   .   .   Child: 0  Const true : type bool [line: 68]
.   .   Sibling: 44  Call outputb: type void [line: 69]
.   .   .   Child: 0  Op ! : type bool [line: 69]
.   .   .   .   Child: 0  Const false : type bool [line: 69]
.   .   Sibling: 45  Call outputb: type void [line: 70]
.   .   .   Child: 0  Op ! : type bool [line: 70]
.   .   .   .   Child: 0  Id x: type bool [mem: Global  size: 1  loc: -11] [line: 70]
.   .   Sibling: 46  Call outputb: type void [line: 71]
.   .   .   Child: 0  Op ! : type bool [line: 71]
.   .   .   .   Child: 0  Op ! : type bool [line: 71]
.   .   .   .   .   Child: 0  Op ! : type bool [line: 71]
.   .   .   .   .   .   Child: 0  Id x: type bool [mem: Global  size: 1  loc: -11] [line: 71]
.   .   Sibling: 47  Call outnl: type void [line: 72]
.   .   Sibling: 48  Call output: type void [line: 74]
.   .   .   Child: 0  Op + : type int [line: 74]
.   .   .   .   Child: 0  Const 5 : type int [line: 74]
.   .   .   .   Child: 1  Const 50 : type int [line: 74]
.   .   Sibling: 49  Call output: type void [line: 75]
.   .   .   Child: 0  Op + : type int [line: 75]
.   .   .   .   Child: 0  Op [ : type int [line: 75]
.   .   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 75]
.   .   .   .   .   Child: 1  Id c: type int [mem: Local  size: 1  loc: -4] [line: 75]
.   .   .   .   Child: 1  Const 50 : type int [line: 75]
.   .   Sibling: 50  Call outnl: type void [line: 76]
.   .   Sibling: 51  Call output: type void [line: 78]
.   .   .   Child: 0  Op - : type int [line: 78]
.   .   .   .   Child: 0  Const 5 : type int [line: 78]
.   .   .   .   Child: 1  Const 50 : type int [line: 78]
.   .   Sibling: 52  Call output: type void [line: 79]
.   .   .   Child: 0  Op - : type int [line: 79]
.   .   .   .   Child: 0  Op - : type int [line: 79]
.   .   .   .   .   Child: 0  Const 30 : type int [line: 79]
.   .   .   .   .   Child: 1  Const 5 : type int [line: 79]
.   .   .   .   Child: 1  Const 50 : type int [line: 79]
.   .   Sibling: 53  Call outnl: type void [line: 80]
.   .   Sibling: 54  Assign = : type int [line: 82]
.   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 82]
.   .   .   Child: 1  Const 50 : type int [line: 82]
.   .   Sibling: 55  Call output: type void [line: 83]
.   .   .   Child: 0  Op - : type int [line: 83]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 83]
.   .   Sibling: 56  Call output: type void [line: 84]
.   .   .   Child: 0  Op - : type int [line: 84]
.   .   .   .   Child: 0  Op - : type int [line: 84]
.   .   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 84]
.   .   Sibling: 57  Call output: type void [line: 85]
.   .   .   Child: 0  Op - : type int [line: 85]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 85]
.   .   Sibling: 58  Call output: type void [line: 86]
.   .   .   Child: 0  Op - : type int [line: 86]
.   .   .   .   Child: 0  Const 0 : type int [line: 86]
.   .   Sibling: 59  Call output: type void [line: 87]
.   .   .   Child: 0  Op - : type int [line: 87]
.   .   .   .   Child: 0  Const 1 : type int [line: 87]
.   .   Sibling: 60  Call outnl: type void [line: 88]
.   .   Sibling: 61  Call output: type void [line: 90]
.   .   .   Child: 0  Op * : type int [line: 90]
.   .   .   .   Child: 0  Op * : type int [line: 90]
.   .   .   .   .   Child: 0  Op * : type int [line: 90]
.   .   .   .   .   .   Child: 0  Op * : type int [line: 90]
.   .   .   .   .   .   .   Child: 0  Const 2 : type int [line: 90]
.   .   .   .   .   .   .   Child: 1  Const 3 : type int [line: 90]
.   .   .   .   .   .   Child: 1  Const 5 : type int [line: 90]
.   .   .   .   .   Child: 1  Const 7 : type int [line: 90]
.   .   .   .   Child: 1  Const 11 : type int [line: 90]
.   .   Sibling: 62  Call output: type void [line: 91]
.   .   .   Child: 0  Op * : type int [line: 91]
.   .   .   .   Child: 0  Const 50 : type int [line: 91]
.   .   .   .   Child: 1  Op [ : type int [line: 91]
.   .   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 91]
.   .   .   .   .   Child: 1  Const 8 : type int [line: 91]
.   .   Sibling: 63  Call output: type void [line: 92]
.   .   .   Child: 0  Op * : type int [line: 92]
.   .   .   .   Child: 0  Op [ : type int [line: 92]
.   .   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 92]
.   .   .   .   .   Child: 1  Const 8 : type int [line: 92]
.   .   .   .   Child: 1  Const 50 : type int [line: 92]
.   .   Sibling: 64  Call outnl: type void [line: 93]
.   .   Sibling: 65  Call output: type void [line: 95]
.   .   .   Child: 0  Op / : type int [line: 95]
.   .   .   .   Child: 0  Const 50 : type int [line: 95]
.   .   .   .   Child: 1  Op [ : type int [line: 95]
.   .   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 95]
.   .   .   .   .   Child: 1  Const 8 : type int [line: 95]
.   .   Sibling: 66  Call output: type void [line: 96]
.   .   .   Child: 0  Op / : type int [line: 96]
.   .   .   .   Child: 0  Op [ : type int [line: 96]
.   .   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 96]
.   .   .   .   .   Child: 1  Const 8 : type int [line: 96]
.   .   .   .   Child: 1  Const 50 : type int [line: 96]
.   .   Sibling: 67  Call output: type void [line: 97]
.   .   .   Child: 0  Op / : type int [line: 97]
.   .   .   .   Child: 0  Op [ : type int [line: 97]
.   .   .   .   .   Child: 0  Id y: array of type int [mem: Global  size: 11  loc: -1] [line: 97]
.   .   .   .   .   Child: 1  Const 8 : type int [line: 97]
.   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -3] [line: 97]
.   .   Sibling: 68  Call output: type void [line: 98]
.   .   .   Child: 0  Op / : type int [line: 98]
.   .   .   .   Child: 0  Op / : type int [line: 98]
.   .   .   .   .   Child: 0  Const 210 : type int [line: 98]
.   .   .   .   .   Child: 1  Const 7 : type int [line: 98]
.   .   .   .   Child: 1  Const 3 : type int [line: 98]
.   .   Sibling: 69  Call outnl: type void [line: 99]
.   .   Sibling: 70  Call output: type void [line: 102]
.   .   .   Child: 0  Op % : type int [line: 102]
.   .   .   .   Child: 0  Const 211 : type int [line: 102]
.   .   .   .   Child: 1  Const 7 : type int [line: 102]
.   .   Sibling: 71  Call output: type void [line: 103]
.   .   .   Child: 0  Op % : type int [line: 103]
.   .   .   .   Child: 0  Const 211 : type int [line: 103]
.   .   .   .   Child: 1  Const 6 : type int [line: 103]
.   .   Sibling: 72  Call output: type void [line: 104]
.   .   .   Child: 0  Op % : type int [line: 104]
.   .   .   .   Child: 0  Const 211 : type int [line: 104]
.   .   .   .   Child: 1  Const 5 : type int [line: 104]
.   .   Sibling: 73  Call output: type void [line: 105]
.   .   .   Child: 0  Op % : type int [line: 105]
.   .   .   .   Child: 0  Const 211 : type int [line: 105]
.   .   .   .   Child: 1  Const 4 : type int [line: 105]
.   .   Sibling: 74  Call output: type void [line: 106]
.   .   .   Child: 0  Op - : type int [line: 106]
.   .   .   .   Child: 0  Const 211 : type int [line: 106]
.   .   .   .   Child: 1  Op * : type int [line: 106]
.   .   .   .   .   Child: 0  Op / : type int [line: 106]
.   .   .   .   .   .   Child: 0  Const 211 : type int [line: 106]
.   .   .   .   .   .   Child: 1  Const 4 : type int [line: 106]
.   .   .   .   .   Child: 1  Const 4 : type int [line: 106]
.   .   Sibling: 75  Call output: type void [line: 107]
.   .   .   Child: 0  Op % : type int [line: 107]
.   .   .   .   Child: 0  Op % : type int [line: 107]
.   .   .   .   .   Child: 0  Const 211 : type int [line: 107]
.   .   .   .   .   Child: 1  Const 100 : type int [line: 107]
.   .   .   .   Child: 1  Const 3 : type int [line: 107]
.   .   Sibling: 76  Call outnl: type void [line: 108]
.   .   Sibling: 77  Call output: type void [line: 110]
.   .   .   Child: 0  Assign = : type int [line: 110]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 110]
.   .   .   .   Child: 1  Assign = : type int [line: 110]
.   .   .   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 110]
.   .   .   .   .   Child: 1  Assign = : type int [line: 110]
.   .   .   .   .   .   Child: 0  Id c: type int [mem: Local  size: 1  loc: -4] [line: 110]
.   .   .   .   .   .   Child: 1  Const 43 : type int [line: 110]
.   .   Sibling: 78  Call output: type void [line: 111]
.   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 111]
.   .   Sibling: 79  Assign = : type int [line: 112]
.   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 112]
.   .   .   Child: 1  Op * : type int [line: 112]
.   .   .   .   Child: 0  Assign = : type int [line: 112]
.   .   .   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 112]
.   .   .   .   .   Child: 1  Const 3 : type int [line: 112]
.   .   .   .   Child: 1  Assign = : type int [line: 112]
.   .   .   .   .   Child: 0  Id c: type int [mem: Local  size: 1  loc: -4] [line: 112]
.   .   .   .   .   Child: 1  Const 4 : type int [line: 112]
.   .   Sibling: 80  Call output: type void [line: 113]
.   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 113]
.   .   Sibling: 81  Call outnl: type void [line: 114]
.   .   Sibling: 82  Assign = : type int [line: 116]
.   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 116]
.   .   .   Child: 1  Const 44 : type int [line: 116]
.   .   Sibling: 83  Assign = : type int [line: 117]
.   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 117]
.   .   .   Child: 1  Const 2 : type int [line: 117]
.   .   Sibling: 84  Call output: type void [line: 118]
.   .   .   Child: 0  Assign += : type int [line: 118]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 118]
.   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -3] [line: 118]
.   .   Sibling: 85  Call output: type void [line: 119]
.   .   .   Child: 0  Assign -= : type int [line: 119]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 119]
.   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -3] [line: 119]
.   .   Sibling: 86  Call output: type void [line: 120]
.   .   .   Child: 0  Assign -= : type int [line: 120]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 120]
.   .   .   .   Child: 1  Id a: type int [mem: Local  size: 1  loc: -2] [line: 120]
.   .   Sibling: 87  Call output: type void [line: 121]
.   .   .   Child: 0  Assign += : type int [line: 121]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 121]
.   .   .   .   Child: 1  Assign += : type int [line: 121]
.   .   .   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 121]
.   .   .   .   .   Child: 1  Const 10 : type int [line: 121]
.   .   Sibling: 88  Call outnl: type void [line: 122]
.   .   Sibling: 89  Assign = : type int [line: 124]
.   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 124]
.   .   .   Child: 1  Const 44 : type int [line: 124]
.   .   Sibling: 90  Assign = : type int [line: 125]
.   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 125]
.   .   .   Child: 1  Const 2 : type int [line: 125]
.   .   Sibling: 91  Call output: type void [line: 126]
.   .   .   Child: 0  Assign *= : type int [line: 126]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 126]
.   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -3] [line: 126]
.   .   Sibling: 92  Call output: type void [line: 127]
.   .   .   Child: 0  Assign /= : type int [line: 127]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 127]
.   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -3] [line: 127]
.   .   Sibling: 93  Call output: type void [line: 128]
.   .   .   Child: 0  Assign /= : type int [line: 128]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 128]
.   .   .   .   Child: 1  Assign /= : type int [line: 128]
.   .   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 128]
.   .   .   .   .   Child: 1  Const 2 : type int [line: 128]
.   .   Sibling: 94  Call output: type void [line: 129]
.   .   .   Child: 0  Assign *= : type int [line: 129]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 129]
.   .   .   .   Child: 1  Assign *= : type int [line: 129]
.   .   .   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 129]
.   .   .   .   .   Child: 1  Const 10 : type int [line: 129]
.   .   Sibling: 95  Call outnl: type void [line: 130]
.   .   Sibling: 96  Assign = : type int [line: 132]
.   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 132]
.   .   .   Child: 1  Const 44 : type int [line: 132]
.   .   Sibling: 97  Assign = : type int [line: 133]
.   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 133]
.   .   .   Child: 1  Const 2 : type int [line: 133]
.   .   Sibling: 98  Call output: type void [line: 134]
.   .   .   Child: 0  Assign ++ : type int [line: 134]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -2] [line: 134]
.   .   Sibling: 99  Call output: type void [line: 135]
.   .   .   Child: 0  Assign -- : type int [line: 135]
.   .   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -3] [line: 135]
.   .   Sibling: 100  Call outnl: type void [line: 136]
.   .   Sibling: 101  Call output: type void [line: 138]
.   .   .   Child: 0  Op - : type int [line: 138]
.   .   .   .   Child: 0  Op - : type int [line: 138]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 138]
.   .   .   .   .   Child: 1  Const 4 : type int [line: 138]
.   .   .   .   Child: 1  Const 5 : type int [line: 138]
.   .   Sibling: 102  Call output: type void [line: 139]
.   .   .   Child: 0  Op / : type int [line: 139]
.   .   .   .   Child: 0  Op / : type int [line: 139]
.   .   .   .   .   Child: 0  Const 211 : type int [line: 139]
.   .   .   .   .   Child: 1  Const 17 : type int [line: 139]
.   .   .   .   Child: 1  Const 5 : type int [line: 139]
.   .   Sibling: 103  Call output: type void [line: 140]
.   .   .   Child: 0  Op / : type int [line: 140]
.   .   .   .   Child: 0  Const 211 : type int [line: 140]
.   .   .   .   Child: 1  Op / : type int [line: 140]
.   .   .   .   .   Child: 0  Const 17 : type int [line: 140]
.   .   .   .   .   Child: 1  Const 5 : type int [line: 140]
.   .   Sibling: 104  Call outnl: type void [line: 141]
.   .   Sibling: 105  Call outputb: type void [line: 143]
.   .   .   Child: 0  Op & : type bool [line: 143]
.   .   .   .   Child: 0  Op | : type bool [line: 143]
.   .   .   .   .   Child: 0  Const true : type bool [line: 143]
.   .   .   .   .   Child: 1  Const false : type bool [line: 143]
.   .   .   .   Child: 1  Const false : type bool [line: 143]
.   .   Sibling: 106  Call outputb: type void [line: 144]
.   .   .   Child: 0  Op | : type bool [line: 144]
.   .   .   .   Child: 0  Const true : type bool [line: 144]
.   .   .   .   Child: 1  Op & : type bool [line: 144]
.   .   .   .   .   Child: 0  Const false : type bool [line: 144]
.   .   .   .   .   Child: 1  Const false : type bool [line: 144]
.   .   Sibling: 107  Call outputb: type void [line: 145]
.   .   .   Child: 0  Op | : type bool [line: 145]
.   .   .   .   Child: 0  Const true : type bool [line: 145]
.   .   .   .   Child: 1  Op & : type bool [line: 145]
.   .   .   .   .   Child: 0  Const false : type bool [line: 145]
.   .   .   .   .   Child: 1  Const false : type bool [line: 145]
.   .   Sibling: 108  Call outnl: type void [line: 146]
.   .   Sibling: 109  Call outputb: type void [line: 148]
.   .   .   Child: 0  Op < : type bool [line: 148]
.   .   .   .   Child: 0  Op ? : type int [line: 148]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 148]
.   .   .   .   Child: 1  Const 3 : type int [line: 148]
.   .   Sibling: 110  Call outputb: type void [line: 149]
.   .   .   Child: 0  Op < : type bool [line: 149]
.   .   .   .   Child: 0  Op ? : type int [line: 149]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 149]
.   .   .   .   Child: 1  Const 3 : type int [line: 149]
.   .   Sibling: 111  Call outputb: type void [line: 150]
.   .   .   Child: 0  Op < : type bool [line: 150]
.   .   .   .   Child: 0  Op ? : type int [line: 150]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 150]
.   .   .   .   Child: 1  Const 3 : type int [line: 150]
.   .   Sibling: 112  Call outputb: type void [line: 151]
.   .   .   Child: 0  Op < : type bool [line: 151]
.   .   .   .   Child: 0  Op ? : type int [line: 151]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 151]
.   .   .   .   Child: 1  Const 3 : type int [line: 151]
.   .   Sibling: 113  Call outputb: type void [line: 152]
.   .   .   Child: 0  Op < : type bool [line: 152]
.   .   .   .   Child: 0  Op ? : type int [line: 152]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 152]
.   .   .   .   Child: 1  Const 3 : type int [line: 152]
.   .   Sibling: 114  Call outputb: type void [line: 153]
.   .   .   Child: 0  Op < : type bool [line: 153]
.   .   .   .   Child: 0  Op ? : type int [line: 153]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 153]
.   .   .   .   Child: 1  Const 3 : type int [line: 153]
.   .   Sibling: 115  Call outputb: type void [line: 154]
.   .   .   Child: 0  Op < : type bool [line: 154]
.   .   .   .   Child: 0  Op ? : type int [line: 154]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 154]
.   .   .   .   Child: 1  Const 3 : type int [line: 154]
.   .   Sibling: 116  Call outputb: type void [line: 155]
.   .   .   Child: 0  Op < : type bool [line: 155]
.   .   .   .   Child: 0  Op ? : type int [line: 155]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 155]
.   .   .   .   Child: 1  Const 3 : type int [line: 155]
.   .   Sibling: 117  Call outputb: type void [line: 156]
.   .   .   Child: 0  Op < : type bool [line: 156]
.   .   .   .   Child: 0  Op ? : type int [line: 156]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 156]
.   .   .   .   Child: 1  Const 3 : type int [line: 156]
.   .   Sibling: 118  Call outputb: type void [line: 157]
.   .   .   Child: 0  Op < : type bool [line: 157]
.   .   .   .   Child: 0  Op ? : type int [line: 157]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 157]
.   .   .   .   Child: 1  Const 3 : type int [line: 157]
.   .   Sibling: 119  Call outputb: type void [line: 158]
.   .   .   Child: 0  Op < : type bool [line: 158]
.   .   .   .   Child: 0  Op ? : type int [line: 158]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 158]
.   .   .   .   Child: 1  Const 3 : type int [line: 158]
.   .   Sibling: 120  Call outputb: type void [line: 159]
.   .   .   Child: 0  Op < : type bool [line: 159]
.   .   .   .   Child: 0  Op ? : type int [line: 159]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 159]
.   .   .   .   Child: 1  Const 3 : type int [line: 159]
.   .   Sibling: 121  Call outputb: type void [line: 160]
.   .   .   Child: 0  Op == : type bool [line: 160]
.   .   .   .   Child: 0  Op ? : type int [line: 160]
.   .   .   .   .   Child: 0  Const 1 : type int [line: 160]
.   .   .   .   Child: 1  Const 0 : type int [line: 160]
.   .   Sibling: 122  Call outnl: type void [line: 161]
.   .   Sibling: 123  Call outputb: type void [line: 163]
.   .   .   Child: 0  Op > : type bool [line: 163]
.   .   .   .   Child: 0  Op ? : type int [line: 163]
.   .   .   .   .   Child: 0  Const 10000 : type int [line: 163]
.   .   .   .   Child: 1  Const 0 : type int [line: 163]
.   .   Sibling: 124  Call outputb: type void [line: 164]
.   .   .   Child: 0  Op > : type bool [line: 164]
.   .   .   .   Child: 0  Op ? : type int [line: 164]
.   .   .   .   .   Child: 0  Const 10000 : type int [line: 164]
.   .   .   .   Child: 1  Const 0 : type int [line: 164]
.   .   Sibling: 125  Call outnl: type void [line: 165]
Number of warnings: 0
Number of errors: 0
