====================================
RUN: factor.c-
Func sqrt: returns type int [line: 2]
.   Child: 0  Param x: type int [mem: Param  size: 1  loc: -2] [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var guess: type int [mem: Local  size: 1  loc: -3] [line: 4]
.   .   Sibling: 1  Var newguess: type int [mem: Local  size: 1  loc: -4] [line: 5]
.   .   Child: 1  If [line: 7]
.   .   .   Child: 0  Op == : type bool [line: 7]
.   .   .   .   Child: 0  Id x: type int [mem: Param  size: 1  loc: -2] [line: 7]
.   .   .   .   Child: 1  Const 1 : type int [line: 7]
.   .   .   Child: 1  Return [line: 7]
.   .   .   .   Child: 0  Const 1 : type int [line: 7]
.   .   Sibling: 1  Assign = : type int [line: 8]
.   .   .   Child: 0  Id guess: type int [mem: Local  size: 1  loc: -3] [line: 8]
.   .   .   Child: 1  Op / : type int [line: 8]
.   .   .   .   Child: 0  Id x: type int [mem: Param  size: 1  loc: -2] [line: 8]
.   .   .   .   Child: 1  Const 2 : type int [line: 8]
.   .   Sibling: 2  Assign = : type int [line: 9]
.   .   .   Child: 0  Id newguess: type int [mem: Local  size: 1  loc: -4] [line: 9]
.   .   .   Child: 1  Op / : type int [line: 9]
.   .   .   .   Child: 0  Op + : type int [line: 9]
.   .   .   .   .   Child: 0  Op / : type int [line: 9]
.   .   .   .   .   .   Child: 0  Id x: type int [mem: Param  size: 1  loc: -2] [line: 9]
.   .   .   .   .   .   Child: 1  Id guess: type int [mem: Local  size: 1  loc: -3] [line: 9]
.   .   .   .   .   Child: 1  Id guess: type int [mem: Local  size: 1  loc: -3] [line: 9]
.   .   .   .   Child: 1  Const 2 : type int [line: 9]
.   .   Sibling: 3  While [line: 10]
.   .   .   Child: 0  Op > : type bool [line: 10]
.   .   .   .   Child: 0  Op - : type int [line: 10]
.   .   .   .   .   Child: 0  Id guess: type int [mem: Local  size: 1  loc: -3] [line: 10]
.   .   .   .   .   Child: 1  Id newguess: type int [mem: Local  size: 1  loc: -4] [line: 10]
.   .   .   .   Child: 1  Const 1 : type int [line: 10]
.   .   .   Child: 1  Compound [line: 10]
.   .   .   .   Child: 1  Assign = : type int [line: 11]
.   .   .   .   .   Child: 0  Id guess: type int [mem: Local  size: 1  loc: -3] [line: 11]
.   .   .   .   .   Child: 1  Id newguess: type int [mem: Local  size: 1  loc: -4] [line: 11]
.   .   .   .   Sibling: 1  Assign = : type int [line: 12]
.   .   .   .   .   Child: 0  Id newguess: type int [mem: Local  size: 1  loc: -4] [line: 12]
.   .   .   .   .   Child: 1  Op / : type int [line: 12]
.   .   .   .   .   .   Child: 0  Op + : type int [line: 12]
.   .   .   .   .   .   .   Child: 0  Op / : type int [line: 12]
.   .   .   .   .   .   .   .   Child: 0  Id x: type int [mem: Param  size: 1  loc: -2] [line: 12]
.   .   .   .   .   .   .   .   Child: 1  Id guess: type int [mem: Local  size: 1  loc: -3] [line: 12]
.   .   .   .   .   .   .   Child: 1  Id guess: type int [mem: Local  size: 1  loc: -3] [line: 12]
.   .   .   .   .   .   Child: 1  Const 2 : type int [line: 12]
.   .   Sibling: 4  If [line: 14]
.   .   .   Child: 0  Op > : type bool [line: 14]
.   .   .   .   Child: 0  Op * : type int [line: 14]
.   .   .   .   .   Child: 0  Id newguess: type int [mem: Local  size: 1  loc: -4] [line: 14]
.   .   .   .   .   Child: 1  Id newguess: type int [mem: Local  size: 1  loc: -4] [line: 14]
.   .   .   .   Child: 1  Id x: type int [mem: Param  size: 1  loc: -2] [line: 14]
.   .   .   Child: 1  Assign = : type int [line: 14]
.   .   .   .   Child: 0  Id newguess: type int [mem: Local  size: 1  loc: -4] [line: 14]
.   .   .   .   Child: 1  Op - : type int [line: 14]
.   .   .   .   .   Child: 0  Id newguess: type int [mem: Local  size: 1  loc: -4] [line: 14]
.   .   .   .   .   Child: 1  Const 1 : type int [line: 14]
.   .   Sibling: 5  Return [line: 16]
.   .   .   Child: 0  Id newguess: type int [mem: Local  size: 1  loc: -4] [line: 16]
Sibling: 1  Func main: returns type void [line: 20]
.   Child: 1  Compound [line: 21]
.   .   Child: 0  Var n: type int [mem: Local  size: 1  loc: -2] [line: 22]
.   .   Sibling: 1  Var i: type int [mem: Local  size: 1  loc: -3] [line: 23]
.   .   Child: 1  While [line: 25]
.   .   .   Child: 0  Op > : type bool [line: 25]
.   .   .   .   Child: 0  Assign = : type int [line: 25]
.   .   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 25]
.   .   .   .   .   Child: 1  Call input: type int [line: 25]
.   .   .   .   Child: 1  Const 1 : type int [line: 25]
.   .   .   Child: 1  Compound [line: 25]
.   .   .   .   Child: 0  Var limit: type int [mem: Local  size: 1  loc: -4] [line: 26]
.   .   .   .   Child: 1  Assign = : type int [line: 27]
.   .   .   .   .   Child: 0  Id limit: type int [mem: Local  size: 1  loc: -4] [line: 27]
.   .   .   .   .   Child: 1  Call sqrt: type int [line: 27]
.   .   .   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 27]
.   .   .   .   Sibling: 1  While [line: 30]
.   .   .   .   .   Child: 0  Op == : type bool [line: 30]
.   .   .   .   .   .   Child: 0  Op % : type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 30]
.   .   .   .   .   .   .   Child: 1  Const 2 : type int [line: 30]
.   .   .   .   .   .   Child: 1  Const 0 : type int [line: 30]
.   .   .   .   .   Child: 1  Compound [line: 30]
.   .   .   .   .   .   Child: 1  Call output: type void [line: 31]
.   .   .   .   .   .   .   Child: 0  Const 2 : type int [line: 31]
.   .   .   .   .   .   Sibling: 1  Assign = : type int [line: 32]
.   .   .   .   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 32]
.   .   .   .   .   .   .   Child: 1  Op / : type int [line: 32]
.   .   .   .   .   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 32]
.   .   .   .   .   .   .   .   Child: 1  Const 2 : type int [line: 32]
.   .   .   .   Sibling: 2  Assign = : type int [line: 36]
.   .   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -3] [line: 36]
.   .   .   .   .   Child: 1  Const 3 : type int [line: 36]
.   .   .   .   Sibling: 3  While [line: 37]
.   .   .   .   .   Child: 0  Op <= : type bool [line: 37]
.   .   .   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -3] [line: 37]
.   .   .   .   .   .   Child: 1  Id limit: type int [mem: Local  size: 1  loc: -4] [line: 37]
.   .   .   .   .   Child: 1  Compound [line: 37]
.   .   .   .   .   .   Child: 1  While [line: 38]
.   .   .   .   .   .   .   Child: 0  Op == : type bool [line: 38]
.   .   .   .   .   .   .   .   Child: 0  Op % : type int [line: 38]
.   .   .   .   .   .   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 38]
.   .   .   .   .   .   .   .   .   Child: 1  Id i: type int [mem: Local  size: 1  loc: -3] [line: 38]
.   .   .   .   .   .   .   .   Child: 1  Const 0 : type int [line: 38]
.   .   .   .   .   .   .   Child: 1  Compound [line: 38]
.   .   .   .   .   .   .   .   Child: 1  Call output: type void [line: 39]
.   .   .   .   .   .   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -3] [line: 39]
.   .   .   .   .   .   .   .   Sibling: 1  Assign = : type int [line: 40]
.   .   .   .   .   .   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 40]
.   .   .   .   .   .   .   .   .   Child: 1  Op / : type int [line: 40]
.   .   .   .   .   .   .   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 40]
.   .   .   .   .   .   .   .   .   .   Child: 1  Id i: type int [mem: Local  size: 1  loc: -3] [line: 40]
.   .   .   .   .   .   .   .   Sibling: 2  Assign = : type int [line: 41]
.   .   .   .   .   .   .   .   .   Child: 0  Id limit: type int [mem: Local  size: 1  loc: -4] [line: 41]
.   .   .   .   .   .   .   .   .   Child: 1  Call sqrt: type int [line: 41]
.   .   .   .   .   .   .   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 41]
.   .   .   .   .   .   Sibling: 1  Assign = : type int [line: 43]
.   .   .   .   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -3] [line: 43]
.   .   .   .   .   .   .   Child: 1  Op + : type int [line: 43]
.   .   .   .   .   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -3] [line: 43]
.   .   .   .   .   .   .   .   Child: 1  Const 2 : type int [line: 43]
.   .   .   .   Sibling: 4  If [line: 46]
.   .   .   .   .   Child: 0  Op > : type bool [line: 46]
.   .   .   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 46]
.   .   .   .   .   .   Child: 1  Const 1 : type int [line: 46]
.   .   .   .   .   Child: 1  Call output: type void [line: 46]
.   .   .   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 46]
.   .   .   .   Sibling: 5  Call outnl: type void [line: 47]
Number of warnings: 0
Number of errors: 0
