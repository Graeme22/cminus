// C-F20
//
// IMPORTANT:
//
// This file has many if ! all semantic errors.
// The errors in the comments are ! necessarily the
// the exact text generated for each error !  !  !   Use the
// error message text in the assignment.  If this doesn't
// test all errors then let me know.  thanks, rh
//
char dog(char x)
{
    char x;   // SPECIAL CASE: params are in function compound statement
              // Symbol %s is already defined at line %d
    int b;

    cat(10);  // Symbol 'cat' is ! defined

    return b; // Expecting return type of %s but got type %s
}

int dog(int x)  // Symbol %s is already defined at line %d
{
    {
        int x;
    }
}               // missing return warning

char cat(char x)
{
    int b:'a';   // initialized with something of the wrong type
    int c:3+4*9;
    int d:b;     // nonconstant initialization
    int e:?3;    // nonconstant initialization

    return; // Expecting a return type of %s but got none
}

char cat;        // Symbol %s is already defined at line %d
char unusedGlobal;  // we currently don't issue a warning for this

int ibex(char x[])
{
    char unusedLocal;  // we currently don't issue a warning for this
    return true;
}

ox(char y)       // no return value therefore type is void
{
    return 666;  // Expecting no return value, but got one.
}

char emu(char x, y, z)
{                    // Warning: There is no return
}

char mane()      // main ! declared
{
    char x, yuri;
    char x;      // Symbol %s is already defined at line %d
    int x;       // Symbol already defined but type of first declaration sticks

    bool ba[8];
    char aa[6];
    char zz[6];
    int bb[6], cc[6];

    int b, c;

    v;     // Variable %s cannot be declared of type

    if (x) x;        // Expecting Boolean test condition
    while (x) x;       // Expecting Boolean test condition
    while (10) x;  // Expecting Boolean test condition

    x = cat;   // cannot use function cat as simple variable
    x = b;     // %s requires things of the same type but lhs is %s & rhs is %s
    x += b;    // %s requires rhs to be of type char
    b -= x;    // %s requires lhs to be of type char
    b > x;     // %s requires lhs to be of type char
    b++;       // Unary %s requires things of type %s but was given type %s

    if (bb) x;  // Cannot use array as test condition
    else if (bb) x; // Cannot use array as test condition
    while (bb ) x;  // Cannot use array as test condition

    break;      // break statement must be inside a while loop.

    while (b ) { break; }
    while (b) { while (b) 666; break; }

    aa + 6;     // The operation %s does ! work with arrays
    aa < zz;    // The operation %s does ! work with arrays
    bb < cc;    // The operation %s does ! work with arrays

    x == true;  // %s requires things of the same type but lhs is %s & rhs is %s
    x == 1;
    b == true;

    false + x;  // %s requires things of type %s but lhs is of type %s

    x * false;  // %s requires things of type %s but rhs is of type %s

    ! x;      // Unary %s requires things of type %s but was given type %s
    ! x+b;    // two errors
    -b;         // Unary %s requires things of type %s but was given type %s

    x[496];     // Cannot index nonarray %s

    b = x==x+x*(x & x);   // lots of errors
    b = x==x+x*(x & y);   // lots of errors
    b = x==x | x*(x & x);   // lots of errors

    *x;               // requires an array
    *aa  &  b;      // %s requires things of type %s but lhs is of type %s
    aa[*aa];    // OK but should ! be :-)
    aa[666];    // for some constant array sizes we might be able to check index but we don't

    aa[b];      // Expecting array index to be of type char but got type %s

    aa[cat];    // Cannot use function 'cat' as a simple variable.

    aa[aa];     // Array index is the unindexed array 'aa'.
    AA[1];      // variables are case sensitive

    aa[meerkat]; // Symbol %s is ! defined

    xyzzy;      // Symbol %s is ! defined
    meerkat();  // Symbol %s is ! defined
    true & xyzzy/666;  // Symbol %s is ! defined

    flight( ! 5, -true, uu, y, x+x*b);  // even though flight is undefined the errors in the arg list should be triggered

    x();        // %s is a simple variable & cannot be called

    dog(3, 5);  // Wrong number of parameters for function %s defined on line %d
    ibex();     // Wrong number of parameters for function %s defined on line %d

    dog(true);  // Expecting %s in parameter %i of call %s defined on line %d

    cat(aa);    // Not expecting array in parameter %i of call %s defined on line %d
    cat(ba);

    ibex(x);    // Expecting array in parameter %i of call %s defined on line %d
    ibex(bb);   // Give priority to type error
    ibex[3];    // Cannot index nonarray %s

    ibex + 4;   //  Cannot use function %s as a simple variable
    ibex;       //  Cannot use function %s as a simple variable

    aa[zz[1]];
    aa[zz];       // Array index is the unindexed array %s
    aa[ox(true)]; // two errors
    aa['x'];
    aa[false];
    aa[ox];
    aa[ibex];

    x = ox(28);  // '=' requires things of the same type but lhs is char & rhs is
    x = x + ox(6);  // '+' requires things of type char but rhs is of type  .
    cat(ox(492));   // Expecting type char in parameter 1 of call to 'cat' defined on line 20 but got type  .
    cat(true);      // Expecting type char in parameter 1 of call to 'cat' defined on line 20 but got type int.
    cat(cat(492));

    x = x = true;   // '=' requires things of the same type but lhs is char & rhs is int.
    b = b = 666;    // '=' requires things of the same type but lhs is int & rhs is char.
    x = b = x = b;

    x*b & b*x;

    emu(x+b, parrot, b & x);
    emu(false, true & emu(x+b, parrot, b & x), true, x*b);

    bb;

    return aa;  // Cannot return an array
}
