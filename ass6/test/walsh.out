====================================
RUN: walsh.c-
WARNING(89): Variable f may be uninitialized when used here.
Func pow: returns type int [line: 3]
.   Child: 0  Param n: type int [mem: Param  size: 1  loc: -2] [line: 3]
.   Sibling: 1  Param p: type int [mem: Param  size: 1  loc: -3] [line: 3]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var sqr: type int [mem: Local  size: 1  loc: -4] [line: 5]
.   .   Sibling: 1  Var ans: type int [mem: Local  size: 1  loc: -5] [line: 6]
.   .   Child: 1  Assign = : type int [line: 8]
.   .   .   Child: 0  Id ans: type int [mem: Local  size: 1  loc: -5] [line: 8]
.   .   .   Child: 1  Const 1 : type int [line: 8]
.   .   Sibling: 1  Assign = : type int [line: 9]
.   .   .   Child: 0  Id sqr: type int [mem: Local  size: 1  loc: -4] [line: 9]
.   .   .   Child: 1  Id n: type int [mem: Param  size: 1  loc: -2] [line: 9]
.   .   Sibling: 2  While [line: 10]
.   .   .   Child: 0  Const true : type bool [line: 10]
.   .   .   Child: 1  Compound [line: 10]
.   .   .   .   Child: 1  If [line: 11]
.   .   .   .   .   Child: 0  Op == : type bool [line: 11]
.   .   .   .   .   .   Child: 0  Op % : type int [line: 11]
.   .   .   .   .   .   .   Child: 0  Id p: type int [mem: Param  size: 1  loc: -3] [line: 11]
.   .   .   .   .   .   .   Child: 1  Const 2 : type int [line: 11]
.   .   .   .   .   .   Child: 1  Const 1 : type int [line: 11]
.   .   .   .   .   Child: 1  Assign = : type int [line: 11]
.   .   .   .   .   .   Child: 0  Id ans: type int [mem: Local  size: 1  loc: -5] [line: 11]
.   .   .   .   .   .   Child: 1  Op * : type int [line: 11]
.   .   .   .   .   .   .   Child: 0  Id ans: type int [mem: Local  size: 1  loc: -5] [line: 11]
.   .   .   .   .   .   .   Child: 1  Id sqr: type int [mem: Local  size: 1  loc: -4] [line: 11]
.   .   .   .   Sibling: 1  Assign = : type int [line: 12]
.   .   .   .   .   Child: 0  Id p: type int [mem: Param  size: 1  loc: -3] [line: 12]
.   .   .   .   .   Child: 1  Op / : type int [line: 12]
.   .   .   .   .   .   Child: 0  Id p: type int [mem: Param  size: 1  loc: -3] [line: 12]
.   .   .   .   .   .   Child: 1  Const 2 : type int [line: 12]
.   .   .   .   Sibling: 2  If [line: 13]
.   .   .   .   .   Child: 0  Op == : type bool [line: 13]
.   .   .   .   .   .   Child: 0  Id p: type int [mem: Param  size: 1  loc: -3] [line: 13]
.   .   .   .   .   .   Child: 1  Const 0 : type int [line: 13]
.   .   .   .   .   Child: 1  Return [line: 13]
.   .   .   .   .   .   Child: 0  Id ans: type int [mem: Local  size: 1  loc: -5] [line: 13]
.   .   .   .   Sibling: 3  Assign = : type int [line: 14]
.   .   .   .   .   Child: 0  Id sqr: type int [mem: Local  size: 1  loc: -4] [line: 14]
.   .   .   .   .   Child: 1  Op * : type int [line: 14]
.   .   .   .   .   .   Child: 0  Id sqr: type int [mem: Local  size: 1  loc: -4] [line: 14]
.   .   .   .   .   .   Child: 1  Id sqr: type int [mem: Local  size: 1  loc: -4] [line: 14]
Sibling: 1  Func getFunc: returns type int [line: 18]
.   Child: 0  Param f: array of type int [mem: Param  size: 1  loc: -2] [line: 18]
.   Child: 1  Compound [line: 19]
.   .   Child: 0  Var numbits: type int [mem: Local  size: 1  loc: -3] [line: 20]
.   .   Sibling: 1  Var i: type int [mem: Local  size: 1  loc: -4] [line: 21]
.   .   Sibling: 2  Var size: type int [mem: Local  size: 1  loc: -5] [line: 22]
.   .   Child: 1  If [line: 24]
.   .   .   Child: 0  Op == : type bool [line: 24]
.   .   .   .   Child: 0  Assign = : type int [line: 24]
.   .   .   .   .   Child: 0  Id numbits: type int [mem: Local  size: 1  loc: -3] [line: 24]
.   .   .   .   .   Child: 1  Call input: type int [line: 24]
.   .   .   .   Child: 1  Const 0 : type int [line: 24]
.   .   .   Child: 1  Return [line: 24]
.   .   .   .   Child: 0  Const 0 : type int [line: 24]
.   .   Sibling: 1  Assign = : type int [line: 25]
.   .   .   Child: 0  Id size: type int [mem: Local  size: 1  loc: -5] [line: 25]
.   .   .   Child: 1  Call pow: type int [line: 25]
.   .   .   .   Child: 0  Const 2 : type int [line: 25]
.   .   .   .   Sibling: 1  Id numbits: type int [mem: Local  size: 1  loc: -3] [line: 25]
.   .   Sibling: 2  Assign = : type int [line: 26]
.   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -4] [line: 26]
.   .   .   Child: 1  Const 0 : type int [line: 26]
.   .   Sibling: 3  While [line: 27]
.   .   .   Child: 0  Op < : type bool [line: 27]
.   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -4] [line: 27]
.   .   .   .   Child: 1  Id size: type int [mem: Local  size: 1  loc: -5] [line: 27]
.   .   .   Child: 1  Compound [line: 27]
.   .   .   .   Child: 1  Assign = : type int [line: 28]
.   .   .   .   .   Child: 0  Op [ : type int [line: 28]
.   .   .   .   .   .   Child: 0  Id f: array of type int [mem: Param  size: 1  loc: -2] [line: 28]
.   .   .   .   .   .   Child: 1  Id i: type int [mem: Local  size: 1  loc: -4] [line: 28]
.   .   .   .   .   Child: 1  Call input: type int [line: 28]
.   .   .   .   Sibling: 1  Assign = : type int [line: 29]
.   .   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -4] [line: 29]
.   .   .   .   .   Child: 1  Op + : type int [line: 29]
.   .   .   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -4] [line: 29]
.   .   .   .   .   .   Child: 1  Const 1 : type int [line: 29]
.   .   Sibling: 4  Return [line: 32]
.   .   .   Child: 0  Id numbits: type int [mem: Local  size: 1  loc: -3] [line: 32]
Sibling: 2  Func printFunc: returns type void [line: 35]
.   Child: 0  Param f: array of type int [mem: Param  size: 1  loc: -2] [line: 35]
.   Sibling: 1  Param size: type int [mem: Param  size: 1  loc: -3] [line: 35]
.   Child: 1  Compound [line: 36]
.   .   Child: 0  Var i: type int [mem: Local  size: 1  loc: -4] [line: 37]
.   .   Child: 1  Assign = : type int [line: 39]
.   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -4] [line: 39]
.   .   .   Child: 1  Const 0 : type int [line: 39]
.   .   Sibling: 1  While [line: 40]
.   .   .   Child: 0  Op < : type bool [line: 40]
.   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -4] [line: 40]
.   .   .   .   Child: 1  Id size: type int [mem: Param  size: 1  loc: -3] [line: 40]
.   .   .   Child: 1  Compound [line: 40]
.   .   .   .   Child: 1  Call output: type void [line: 41]
.   .   .   .   .   Child: 0  Op [ : type int [line: 41]
.   .   .   .   .   .   Child: 0  Id f: array of type int [mem: Param  size: 1  loc: -2] [line: 41]
.   .   .   .   .   .   Child: 1  Id i: type int [mem: Local  size: 1  loc: -4] [line: 41]
.   .   .   .   Sibling: 1  Assign = : type int [line: 42]
.   .   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -4] [line: 42]
.   .   .   .   .   Child: 1  Op + : type int [line: 42]
.   .   .   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -4] [line: 42]
.   .   .   .   .   .   Child: 1  Const 1 : type int [line: 42]
.   .   Sibling: 2  Call outnl: type void [line: 44]
Sibling: 3  Func fwt: returns type void [line: 48]
.   Child: 0  Param w: array of type int [mem: Param  size: 1  loc: -2] [line: 48]
.   Sibling: 1  Param start: type int [mem: Param  size: 1  loc: -3] [line: 48]
.   Sibling: 2  Param size: type int [mem: Param  size: 1  loc: -4] [line: 48]
.   Child: 1  Compound [line: 49]
.   .   Child: 0  Var a: type int [mem: Local  size: 1  loc: -5] [line: 50]
.   .   Sibling: 1  Var b: type int [mem: Local  size: 1  loc: -6] [line: 50]
.   .   Sibling: 2  Var tmp: type int [mem: Local  size: 1  loc: -7] [line: 50]
.   .   Child: 1  Assign = : type int [line: 52]
.   .   .   Child: 0  Id size: type int [mem: Param  size: 1  loc: -4] [line: 52]
.   .   .   Child: 1  Op / : type int [line: 52]
.   .   .   .   Child: 0  Id size: type int [mem: Param  size: 1  loc: -4] [line: 52]
.   .   .   .   Child: 1  Const 2 : type int [line: 52]
.   .   Sibling: 1  If [line: 53]
.   .   .   Child: 0  Op > : type bool [line: 53]
.   .   .   .   Child: 0  Id size: type int [mem: Param  size: 1  loc: -4] [line: 53]
.   .   .   .   Child: 1  Const 1 : type int [line: 53]
.   .   .   Child: 1  Compound [line: 53]
.   .   .   .   Child: 1  Call fwt: type void [line: 54]
.   .   .   .   .   Child: 0  Id w: array of type int [mem: Param  size: 1  loc: -2] [line: 54]
.   .   .   .   .   Sibling: 1  Id start: type int [mem: Param  size: 1  loc: -3] [line: 54]
.   .   .   .   .   Sibling: 2  Id size: type int [mem: Param  size: 1  loc: -4] [line: 54]
.   .   .   .   Sibling: 1  Call fwt: type void [line: 55]
.   .   .   .   .   Child: 0  Id w: array of type int [mem: Param  size: 1  loc: -2] [line: 55]
.   .   .   .   .   Sibling: 1  Op + : type int [line: 55]
.   .   .   .   .   .   Child: 0  Id start: type int [mem: Param  size: 1  loc: -3] [line: 55]
.   .   .   .   .   .   Child: 1  Id size: type int [mem: Param  size: 1  loc: -4] [line: 55]
.   .   .   .   .   Sibling: 2  Id size: type int [mem: Param  size: 1  loc: -4] [line: 55]
.   .   Sibling: 2  Assign = : type int [line: 58]
.   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -5] [line: 58]
.   .   .   Child: 1  Id start: type int [mem: Param  size: 1  loc: -3] [line: 58]
.   .   Sibling: 3  Assign = : type int [line: 59]
.   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -6] [line: 59]
.   .   .   Child: 1  Op + : type int [line: 59]
.   .   .   .   Child: 0  Id start: type int [mem: Param  size: 1  loc: -3] [line: 59]
.   .   .   .   Child: 1  Id size: type int [mem: Param  size: 1  loc: -4] [line: 59]
.   .   Sibling: 4  While [line: 60]
.   .   .   Child: 0  Op < : type bool [line: 60]
.   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -5] [line: 60]
.   .   .   .   Child: 1  Op + : type int [line: 60]
.   .   .   .   .   Child: 0  Id start: type int [mem: Param  size: 1  loc: -3] [line: 60]
.   .   .   .   .   Child: 1  Id size: type int [mem: Param  size: 1  loc: -4] [line: 60]
.   .   .   Child: 1  Compound [line: 60]
.   .   .   .   Child: 1  Assign = : type int [line: 61]
.   .   .   .   .   Child: 0  Id tmp: type int [mem: Local  size: 1  loc: -7] [line: 61]
.   .   .   .   .   Child: 1  Op [ : type int [line: 61]
.   .   .   .   .   .   Child: 0  Id w: array of type int [mem: Param  size: 1  loc: -2] [line: 61]
.   .   .   .   .   .   Child: 1  Id a: type int [mem: Local  size: 1  loc: -5] [line: 61]
.   .   .   .   Sibling: 1  Assign = : type int [line: 62]
.   .   .   .   .   Child: 0  Op [ : type int [line: 62]
.   .   .   .   .   .   Child: 0  Id w: array of type int [mem: Param  size: 1  loc: -2] [line: 62]
.   .   .   .   .   .   Child: 1  Id a: type int [mem: Local  size: 1  loc: -5] [line: 62]
.   .   .   .   .   Child: 1  Op + : type int [line: 62]
.   .   .   .   .   .   Child: 0  Op [ : type int [line: 62]
.   .   .   .   .   .   .   Child: 0  Id w: array of type int [mem: Param  size: 1  loc: -2] [line: 62]
.   .   .   .   .   .   .   Child: 1  Id a: type int [mem: Local  size: 1  loc: -5] [line: 62]
.   .   .   .   .   .   Child: 1  Op [ : type int [line: 62]
.   .   .   .   .   .   .   Child: 0  Id w: array of type int [mem: Param  size: 1  loc: -2] [line: 62]
.   .   .   .   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -6] [line: 62]
.   .   .   .   Sibling: 2  Assign = : type int [line: 63]
.   .   .   .   .   Child: 0  Op [ : type int [line: 63]
.   .   .   .   .   .   Child: 0  Id w: array of type int [mem: Param  size: 1  loc: -2] [line: 63]
.   .   .   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -6] [line: 63]
.   .   .   .   .   Child: 1  Op - : type int [line: 63]
.   .   .   .   .   .   Child: 0  Id tmp: type int [mem: Local  size: 1  loc: -7] [line: 63]
.   .   .   .   .   .   Child: 1  Op [ : type int [line: 63]
.   .   .   .   .   .   .   Child: 0  Id w: array of type int [mem: Param  size: 1  loc: -2] [line: 63]
.   .   .   .   .   .   .   Child: 1  Id b: type int [mem: Local  size: 1  loc: -6] [line: 63]
.   .   .   .   Sibling: 3  Assign = : type int [line: 64]
.   .   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -5] [line: 64]
.   .   .   .   .   Child: 1  Op + : type int [line: 64]
.   .   .   .   .   .   Child: 0  Id a: type int [mem: Local  size: 1  loc: -5] [line: 64]
.   .   .   .   .   .   Child: 1  Const 1 : type int [line: 64]
.   .   .   .   Sibling: 4  Assign = : type int [line: 65]
.   .   .   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -6] [line: 65]
.   .   .   .   .   Child: 1  Op + : type int [line: 65]
.   .   .   .   .   .   Child: 0  Id b: type int [mem: Local  size: 1  loc: -6] [line: 65]
.   .   .   .   .   .   Child: 1  Const 1 : type int [line: 65]
Sibling: 4  Func div: returns type void [line: 69]
.   Child: 0  Param f: array of type int [mem: Param  size: 1  loc: -2] [line: 69]
.   Sibling: 1  Param size: type int [mem: Param  size: 1  loc: -3] [line: 69]
.   Child: 1  Compound [line: 70]
.   .   Child: 0  Var i: type int [mem: Local  size: 1  loc: -4] [line: 71]
.   .   Child: 1  Assign = : type int [line: 73]
.   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -4] [line: 73]
.   .   .   Child: 1  Const 0 : type int [line: 73]
.   .   Sibling: 1  While [line: 74]
.   .   .   Child: 0  Op < : type bool [line: 74]
.   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -4] [line: 74]
.   .   .   .   Child: 1  Id size: type int [mem: Param  size: 1  loc: -3] [line: 74]
.   .   .   Child: 1  Compound [line: 74]
.   .   .   .   Child: 1  Assign = : type int [line: 75]
.   .   .   .   .   Child: 0  Op [ : type int [line: 75]
.   .   .   .   .   .   Child: 0  Id f: array of type int [mem: Param  size: 1  loc: -2] [line: 75]
.   .   .   .   .   .   Child: 1  Id i: type int [mem: Local  size: 1  loc: -4] [line: 75]
.   .   .   .   .   Child: 1  Op / : type int [line: 75]
.   .   .   .   .   .   Child: 0  Op [ : type int [line: 75]
.   .   .   .   .   .   .   Child: 0  Id f: array of type int [mem: Param  size: 1  loc: -2] [line: 75]
.   .   .   .   .   .   .   Child: 1  Id i: type int [mem: Local  size: 1  loc: -4] [line: 75]
.   .   .   .   .   .   Child: 1  Id size: type int [mem: Param  size: 1  loc: -3] [line: 75]
.   .   .   .   Sibling: 1  Assign ++ : type int [line: 76]
.   .   .   .   .   Child: 0  Id i: type int [mem: Local  size: 1  loc: -4] [line: 76]
Sibling: 5  Func main: returns type int [line: 80]
.   Child: 1  Compound [line: 81]
.   .   Child: 0  Var f: array of type int [mem: Local  size: 257  loc: -3] [line: 82]
.   .   Sibling: 1  Var size: type int [mem: Local  size: 1  loc: -259] [line: 84]
.   .   Sibling: 2  Var numbits: type int [mem: Local  size: 1  loc: -260] [line: 85]
.   .   Sibling: 3  Var half: type int [mem: Local  size: 1  loc: -261] [line: 86]
.   .   Child: 1  While [line: 88]
.   .   .   Child: 0  Const true : type bool [line: 88]
.   .   .   Child: 1  Compound [line: 88]
.   .   .   .   Child: 1  If [line: 89]
.   .   .   .   .   Child: 0  Op == : type bool [line: 89]
.   .   .   .   .   .   Child: 0  Assign = : type int [line: 89]
.   .   .   .   .   .   .   Child: 0  Id numbits: type int [mem: Local  size: 1  loc: -260] [line: 89]
.   .   .   .   .   .   .   Child: 1  Call getFunc: type int [line: 89]
.   .   .   .   .   .   .   .   Child: 0  Id f: array of type int [mem: Local  size: 257  loc: -3] [line: 89]
.   .   .   .   .   .   Child: 1  Const 0 : type int [line: 89]
.   .   .   .   .   Child: 1  Return [line: 89]
.   .   .   .   .   .   Child: 0  Const 0 : type int [line: 89]
.   .   .   .   Sibling: 1  Assign = : type int [line: 90]
.   .   .   .   .   Child: 0  Id size: type int [mem: Local  size: 1  loc: -259] [line: 90]
.   .   .   .   .   Child: 1  Call pow: type int [line: 90]
.   .   .   .   .   .   Child: 0  Const 2 : type int [line: 90]
.   .   .   .   .   .   Sibling: 1  Id numbits: type int [mem: Local  size: 1  loc: -260] [line: 90]
.   .   .   .   Sibling: 2  Assign = : type int [line: 91]
.   .   .   .   .   Child: 0  Id half: type int [mem: Local  size: 1  loc: -261] [line: 91]
.   .   .   .   .   Child: 1  Op / : type int [line: 91]
.   .   .   .   .   .   Child: 0  Id size: type int [mem: Local  size: 1  loc: -259] [line: 91]
.   .   .   .   .   .   Child: 1  Const 2 : type int [line: 91]
.   .   .   .   Sibling: 3  Call fwt: type void [line: 93]
.   .   .   .   .   Child: 0  Id f: array of type int [mem: Local  size: 257  loc: -3] [line: 93]
.   .   .   .   .   Sibling: 1  Const 0 : type int [line: 93]
.   .   .   .   .   Sibling: 2  Id size: type int [mem: Local  size: 1  loc: -259] [line: 93]
.   .   .   .   Sibling: 4  Call printFunc: type void [line: 94]
.   .   .   .   .   Child: 0  Id f: array of type int [mem: Local  size: 257  loc: -3] [line: 94]
.   .   .   .   .   Sibling: 1  Id size: type int [mem: Local  size: 1  loc: -259] [line: 94]
.   .   .   .   Sibling: 5  Call fwt: type void [line: 96]
.   .   .   .   .   Child: 0  Id f: array of type int [mem: Local  size: 257  loc: -3] [line: 96]
.   .   .   .   .   Sibling: 1  Const 0 : type int [line: 96]
.   .   .   .   .   Sibling: 2  Id size: type int [mem: Local  size: 1  loc: -259] [line: 96]
.   .   .   .   Sibling: 6  Call div: type void [line: 97]
.   .   .   .   .   Child: 0  Id f: array of type int [mem: Local  size: 257  loc: -3] [line: 97]
.   .   .   .   .   Sibling: 1  Id size: type int [mem: Local  size: 1  loc: -259] [line: 97]
.   .   .   .   Sibling: 7  Call printFunc: type void [line: 98]
.   .   .   .   .   Child: 0  Id f: array of type int [mem: Local  size: 257  loc: -3] [line: 98]
.   .   .   .   .   Sibling: 1  Id size: type int [mem: Local  size: 1  loc: -259] [line: 98]
.   .   Sibling: 1  Return [line: 100]
.   .   .   Child: 0  Const 0 : type int [line: 100]
Number of warnings: 1
Number of errors: 0
