====================================
RUN: factorialr.c-
Func factorial: returns type int [line: 3]
.   Child: 0  Param n: type int [mem: Param  size: 1  loc: -2] [line: 3]
.   Child: 1  Compound [line: 4]
.   .   Child: 1  If [line: 5]
.   .   .   Child: 0  Op < : type bool [line: 5]
.   .   .   .   Child: 0  Id n: type int [mem: Param  size: 1  loc: -2] [line: 5]
.   .   .   .   Child: 1  Const 2 : type int [line: 5]
.   .   .   Child: 1  Return [line: 5]
.   .   .   .   Child: 0  Const 1 : type int [line: 5]
.   .   .   Child: 2  Return [line: 6]
.   .   .   .   Child: 0  Op * : type int [line: 6]
.   .   .   .   .   Child: 0  Id n: type int [mem: Param  size: 1  loc: -2] [line: 6]
.   .   .   .   .   Child: 1  Call factorial: type int [line: 6]
.   .   .   .   .   .   Child: 0  Op - : type int [line: 6]
.   .   .   .   .   .   .   Child: 0  Id n: type int [mem: Param  size: 1  loc: -2] [line: 6]
.   .   .   .   .   .   .   Child: 1  Const 1 : type int [line: 6]
Sibling: 1  Func main: returns type void [line: 9]
.   Child: 1  Compound [line: 10]
.   .   Child: 0  Var n: type int [mem: Local  size: 1  loc: -2] [line: 11]
.   .   Child: 1  Assign = : type int [line: 12]
.   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 12]
.   .   .   Child: 1  Call input: type int [line: 12]
.   .   Sibling: 1  Assign = : type int [line: 13]
.   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 13]
.   .   .   Child: 1  Call factorial: type int [line: 13]
.   .   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 13]
.   .   Sibling: 2  Call output: type void [line: 14]
.   .   .   Child: 0  Id n: type int [mem: Local  size: 1  loc: -2] [line: 14]
.   .   Sibling: 3  Call outnl: type void [line: 15]
Number of warnings: 0
Number of errors: 0
