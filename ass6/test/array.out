====================================
RUN: array.c-
WARNING(14): The variable z seems not to be used.
WARNING(22): Variable y may be uninitialized when used here.
Var w: array of type int [mem: Global  size: 34  loc: -1] [line: 2]
Sibling: 1  Func dog: returns type int [line: 4]
.   Child: 0  Param x: type int [mem: Param  size: 1  loc: -2] [line: 4]
.   Child: 1  Compound [line: 4]
.   .   Child: 0  Var y: array of type int [mem: Local  size: 23  loc: -4] [line: 5]
.   .   Sibling: 1  Var z: type int [mem: Local  size: 1  loc: -26] [line: 5]
.   .   Child: 1  Assign = : type int [line: 7]
.   .   .   Child: 0  Op [ : type int [line: 7]
.   .   .   .   Child: 0  Id y: array of type int [mem: Local  size: 23  loc: -4] [line: 7]
.   .   .   .   Child: 1  Const 11 : type int [line: 7]
.   .   .   Child: 1  Op + : type int [line: 7]
.   .   .   .   Child: 0  Op * : type int [line: 7]
.   .   .   .   .   Child: 0  Id x: type int [mem: Param  size: 1  loc: -2] [line: 7]
.   .   .   .   .   Child: 1  Const 111 : type int [line: 7]
.   .   .   .   Child: 1  Const 222 : type int [line: 7]
.   .   Sibling: 1  Assign = : type int [line: 8]
.   .   .   Child: 0  Id z: type int [mem: Local  size: 1  loc: -26] [line: 8]
.   .   .   Child: 1  Op [ : type int [line: 8]
.   .   .   .   Child: 0  Id y: array of type int [mem: Local  size: 23  loc: -4] [line: 8]
.   .   .   .   Child: 1  Const 11 : type int [line: 8]
.   .   Sibling: 2  Assign = : type int [line: 9]
.   .   .   Child: 0  Op [ : type int [line: 9]
.   .   .   .   Child: 0  Id w: array of type int [mem: Global  size: 34  loc: -1] [line: 9]
.   .   .   .   Child: 1  Const 13 : type int [line: 9]
.   .   .   Child: 1  Op * : type int [line: 9]
.   .   .   .   Child: 0  Op * : type int [line: 9]
.   .   .   .   .   Child: 0  Op * : type int [line: 9]
.   .   .   .   .   .   Child: 0  Op - : type int [line: 9]
.   .   .   .   .   .   .   Child: 0  Op [ : type int [line: 9]
.   .   .   .   .   .   .   .   Child: 0  Id w: array of type int [mem: Global  size: 34  loc: -1] [line: 9]
.   .   .   .   .   .   .   .   Child: 1  Const 15 : type int [line: 9]
.   .   .   .   .   .   Child: 1  Id x: type int [mem: Param  size: 1  loc: -2] [line: 9]
.   .   .   .   .   Child: 1  Op [ : type int [line: 9]
.   .   .   .   .   .   Child: 0  Id y: array of type int [mem: Local  size: 23  loc: -4] [line: 9]
.   .   .   .   .   .   Child: 1  Const 17 : type int [line: 9]
.   .   .   .   Child: 1  Id z: type int [mem: Local  size: 1  loc: -26] [line: 9]
.   .   Sibling: 3  Return [line: 11]
.   .   .   Child: 0  Op * : type int [line: 11]
.   .   .   .   Child: 0  Id z: type int [mem: Local  size: 1  loc: -26] [line: 11]
.   .   .   .   Child: 1  Op [ : type int [line: 11]
.   .   .   .   .   Child: 0  Id y: array of type int [mem: Local  size: 23  loc: -4] [line: 11]
.   .   .   .   .   Child: 1  Const 11 : type int [line: 11]
Sibling: 2  Func cat: returns type void [line: 14]
.   Child: 0  Param x: array of type int [mem: Param  size: 1  loc: -2] [line: 14]
.   Sibling: 1  Param z: type int [mem: Param  size: 1  loc: -3] [line: 14]
.   Child: 1  Compound [line: 14]
.   .   Child: 1  Assign = : type int [line: 15]
.   .   .   Child: 0  Op [ : type int [line: 15]
.   .   .   .   Child: 0  Id x: array of type int [mem: Param  size: 1  loc: -2] [line: 15]
.   .   .   .   Child: 1  Const 10 : type int [line: 15]
.   .   .   Child: 1  Const 333 : type int [line: 15]
.   .   Sibling: 1  Assign = : type int [line: 16]
.   .   .   Child: 0  Op [ : type int [line: 16]
.   .   .   .   Child: 0  Id w: array of type int [mem: Global  size: 34  loc: -1] [line: 16]
.   .   .   .   Child: 1  Const 11 : type int [line: 16]
.   .   .   Child: 1  Const 444 : type int [line: 16]
Sibling: 3  Func main: returns type void [line: 19]
.   Child: 1  Compound [line: 19]
.   .   Child: 0  Var y: array of type int [mem: Local  size: 21  loc: -3] [line: 20]
.   .   Child: 1  Call cat: type void [line: 22]
.   .   .   Child: 0  Id y: array of type int [mem: Local  size: 21  loc: -3] [line: 22]
.   .   .   Sibling: 1  Const 12 : type int [line: 22]
.   .   Sibling: 1  Call dog: type int [line: 23]
.   .   .   Child: 0  Const 666 : type int [line: 23]
Number of warnings: 2
Number of errors: 0
