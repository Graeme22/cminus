// C-F20
// C-F20
//
// Test all the basic elements of C-
//
int gromit;

  wallace(int wrong, trousers)
{
   bool close, shave;

   close;
   close = shave;
   wrong = trousers % (666/wrong);
   gromit = wrong * trousers - gromit + -42;
   gromit += 27182818;
   gromit -= 31415927;
   close = wrong < trousers & trousers <= gromit;
   shave = wrong > trousers & trousers >= gromit;
   {
      int a, grand, day, out;
      a = grand += day -= out;
   }
   close = -1*2+3<4*5 & 6+7>-3;
   shave = true | ((-(1*(2+3)))<(4*5) & ((6+7)>(-3)));
   if (shave != close) shave =  !  close;
   if ( ! (shave == close)  |   ! close) shave = true;
   else close = false;
   while (shave) {
       int were, rabbit;
       int sheep[10];

       sheep[2] = 1618;
       if (sheep[2]<496) break;
       wallace(gromit--, were-rabbit);
       {
           int the, wrong, trousers;

           the = wrong += trousers++;
           if (were == rabbit) were = wrong--;  // assignment is in test
        }
   }
   return;
}

int Wendolene(int wool; bool shawn; int yarn[]; bool preston[])
{
        return wool + yarn[0] + *yarn + yarn[7*wool];
}

bool ramsBottom()
{
    int chicken[2];
    bool run[3];
    int wallace[2], gromit[3];

    42 * Wendolene(1+2+3,  ! true | true & false, chicken, run);
    run[*run-1];

    return  ! wallace[1]>=-gromit[2]*3;
}

int cheese(int x, y) while (x>0) if (y>3) x--; else return x*x%y;

int Wensleydale(int x; int y) return cheese(x, gromit);  // weird parm list

int main()
{
        int wool, yarn[113];
        bool shawn, preston[22];

        wallace(cheese(62, 62), gromit);
        return Wendolene(*preston**yarn, shawn, yarn, preston);
}
