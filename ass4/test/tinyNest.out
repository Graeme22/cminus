====================================
FILE: tinyNest.c-
ERROR(18): Function 'output' is not declared.
ERROR(19): Function 'output' is not declared.
ERROR(20): Function 'output' is not declared.
ERROR(21): Function 'output' is not declared.
ERROR(22): Function 'output' is not declared.
ERROR(23): Function 'outnl' is not declared.
ERROR(43): Function 'output' is not declared.
ERROR(44): Function 'output' is not declared.
ERROR(45): Function 'output' is not declared.
ERROR(46): Function 'output' is not declared.
ERROR(47): Function 'output' is not declared.
ERROR(48): Function 'outnl' is not declared.
ERROR(58): Function 'output' is not declared.
ERROR(59): Function 'output' is not declared.
ERROR(60): Function 'output' is not declared.
ERROR(61): Function 'output' is not declared.
ERROR(62): Function 'output' is not declared.
ERROR(63): Function 'outnl' is not declared.
ERROR(70): Function 'output' is not declared.
ERROR(71): Function 'output' is not declared.
ERROR(72): Function 'output' is not declared.
ERROR(73): Function 'output' is not declared.
ERROR(74): Function 'output' is not declared.
ERROR(75): Function 'outnl' is not declared.
ERROR(77): Function 'output' is not declared.
ERROR(78): Function 'output' is not declared.
ERROR(79): Function 'output' is not declared.
ERROR(80): Function 'output' is not declared.
ERROR(81): Function 'output' is not declared.
ERROR(82): Function 'outnl' is not declared.
ERROR(89): Function 'output' is not declared.
ERROR(90): Function 'output' is not declared.
ERROR(91): Function 'output' is not declared.
ERROR(92): Function 'output' is not declared.
ERROR(93): Function 'output' is not declared.
ERROR(94): Function 'outnl' is not declared.
ERROR(97): Function 'output' is not declared.
ERROR(98): Function 'output' is not declared.
ERROR(99): Function 'output' is not declared.
ERROR(100): Function 'output' is not declared.
ERROR(101): Function 'output' is not declared.
ERROR(102): Function 'outnl' is not declared.
ERROR(106): Function 'output' is not declared.
ERROR(107): Function 'output' is not declared.
ERROR(108): Function 'output' is not declared.
ERROR(109): Function 'output' is not declared.
ERROR(110): Function 'output' is not declared.
ERROR(111): Function 'outnl' is not declared.
Var x: type int [line: 3]
Sibling: 1  Var y: type int [line: 4]
Sibling: 2  Var z: type int [line: 5]
Sibling: 3  Func agamemnon: returns type void [line: 7]
.   Child: 1  Compound [line: 8]
.   .   Child: 0  Var a: type int [line: 9]
.   .   Sibling: 1  Var b: type int [line: 10]
.   .   Sibling: 2  Var x: type int [line: 11]
.   .   Child: 1  Assign = : type int [line: 13]
.   .   .   Child: 0  Id a: type int [line: 13]
.   .   .   Child: 1  Const 666 : type int [line: 13]
.   .   Sibling: 1  Assign = : type int [line: 14]
.   .   .   Child: 0  Id b: type int [line: 14]
.   .   .   Child: 1  Const 666 : type int [line: 14]
.   .   Sibling: 2  Assign = : type int [line: 15]
.   .   .   Child: 0  Id x: type int [line: 15]
.   .   .   Child: 1  Const 666 : type int [line: 15]
.   .   Sibling: 3  Assign = : type int [line: 16]
.   .   .   Child: 0  Id z: type int [line: 16]
.   .   .   Child: 1  Const 666 : type int [line: 16]
.   .   Sibling: 4  Call output: undefined type [line: 18]
.   .   .   Child: 0  Id a: type int [line: 18]
.   .   Sibling: 5  Call output: undefined type [line: 19]
.   .   .   Child: 0  Id b: type int [line: 19]
.   .   Sibling: 6  Call output: undefined type [line: 20]
.   .   .   Child: 0  Id x: type int [line: 20]
.   .   Sibling: 7  Call output: undefined type [line: 21]
.   .   .   Child: 0  Id y: type int [line: 21]
.   .   Sibling: 8  Call output: undefined type [line: 22]
.   .   .   Child: 0  Id z: type int [line: 22]
.   .   Sibling: 9  Call outnl: undefined type [line: 23]
.   .   Sibling: 10  Assign = : type int [line: 24]
.   .   .   Child: 0  Id a: type int [line: 24]
.   .   .   Child: 1  Const 1 : type int [line: 24]
.   .   Sibling: 11  Assign = : type int [line: 25]
.   .   .   Child: 0  Id b: type int [line: 25]
.   .   .   Child: 1  Const 2 : type int [line: 25]
.   .   Sibling: 12  Assign = : type int [line: 26]
.   .   .   Child: 0  Id x: type int [line: 26]
.   .   .   Child: 1  Const 3 : type int [line: 26]
.   .   Sibling: 13  Assign = : type int [line: 27]
.   .   .   Child: 0  Id y: type int [line: 27]
.   .   .   Child: 1  Const 4 : type int [line: 27]
.   .   Sibling: 14  Assign = : type int [line: 28]
.   .   .   Child: 0  Id z: type int [line: 28]
.   .   .   Child: 1  Const 5 : type int [line: 28]
Sibling: 4  Func main: returns type void [line: 31]
.   Child: 1  Compound [line: 32]
.   .   Child: 0  Var a: type int [line: 33]
.   .   Sibling: 1  Var b: type int [line: 34]
.   .   Sibling: 2  Var z: type int [line: 35]
.   .   Child: 1  Assign = : type int [line: 37]
.   .   .   Child: 0  Id a: type int [line: 37]
.   .   .   Child: 1  Const 6 : type int [line: 37]
.   .   Sibling: 1  Assign = : type int [line: 38]
.   .   .   Child: 0  Id b: type int [line: 38]
.   .   .   Child: 1  Const 7 : type int [line: 38]
.   .   Sibling: 2  Assign = : type int [line: 39]
.   .   .   Child: 0  Id x: type int [line: 39]
.   .   .   Child: 1  Const 8 : type int [line: 39]
.   .   Sibling: 3  Assign = : type int [line: 40]
.   .   .   Child: 0  Id y: type int [line: 40]
.   .   .   Child: 1  Const 9 : type int [line: 40]
.   .   Sibling: 4  Assign = : type int [line: 41]
.   .   .   Child: 0  Id z: type int [line: 41]
.   .   .   Child: 1  Const 10 : type int [line: 41]
.   .   Sibling: 5  Call output: undefined type [line: 43]
.   .   .   Child: 0  Id a: type int [line: 43]
.   .   Sibling: 6  Call output: undefined type [line: 44]
.   .   .   Child: 0  Id b: type int [line: 44]
.   .   Sibling: 7  Call output: undefined type [line: 45]
.   .   .   Child: 0  Id x: type int [line: 45]
.   .   Sibling: 8  Call output: undefined type [line: 46]
.   .   .   Child: 0  Id y: type int [line: 46]
.   .   Sibling: 9  Call output: undefined type [line: 47]
.   .   .   Child: 0  Id z: type int [line: 47]
.   .   Sibling: 10  Call outnl: undefined type [line: 48]
.   .   Sibling: 11  Compound [line: 49]
.   .   .   Child: 0  Var a: type int [line: 50]
.   .   .   Sibling: 1  Var b: type int [line: 51]
.   .   .   Sibling: 2  Var z: type int [line: 52]
.   .   .   Child: 1  Assign = : type int [line: 54]
.   .   .   .   Child: 0  Id a: type int [line: 54]
.   .   .   .   Child: 1  Const 666 : type int [line: 54]
.   .   .   Sibling: 1  Assign = : type int [line: 55]
.   .   .   .   Child: 0  Id b: type int [line: 55]
.   .   .   .   Child: 1  Const 666 : type int [line: 55]
.   .   .   Sibling: 2  Assign = : type int [line: 56]
.   .   .   .   Child: 0  Id z: type int [line: 56]
.   .   .   .   Child: 1  Const 666 : type int [line: 56]
.   .   .   Sibling: 3  Call output: undefined type [line: 58]
.   .   .   .   Child: 0  Id a: type int [line: 58]
.   .   .   Sibling: 4  Call output: undefined type [line: 59]
.   .   .   .   Child: 0  Id b: type int [line: 59]
.   .   .   Sibling: 5  Call output: undefined type [line: 60]
.   .   .   .   Child: 0  Id x: type int [line: 60]
.   .   .   Sibling: 6  Call output: undefined type [line: 61]
.   .   .   .   Child: 0  Id y: type int [line: 61]
.   .   .   Sibling: 7  Call output: undefined type [line: 62]
.   .   .   .   Child: 0  Id z: type int [line: 62]
.   .   .   Sibling: 8  Call outnl: undefined type [line: 63]
.   .   .   Sibling: 9  Assign = : type int [line: 65]
.   .   .   .   Child: 0  Id a: type int [line: 65]
.   .   .   .   Child: 1  Const 11 : type int [line: 65]
.   .   .   Sibling: 10  Assign = : type int [line: 66]
.   .   .   .   Child: 0  Id b: type int [line: 66]
.   .   .   .   Child: 1  Const 12 : type int [line: 66]
.   .   .   Sibling: 11  Assign = : type int [line: 67]
.   .   .   .   Child: 0  Id x: type int [line: 67]
.   .   .   .   Child: 1  Const 13 : type int [line: 67]
.   .   .   Sibling: 12  Assign = : type int [line: 68]
.   .   .   .   Child: 0  Id y: type int [line: 68]
.   .   .   .   Child: 1  Const 14 : type int [line: 68]
.   .   .   Sibling: 13  Assign = : type int [line: 69]
.   .   .   .   Child: 0  Id z: type int [line: 69]
.   .   .   .   Child: 1  Const 15 : type int [line: 69]
.   .   .   Sibling: 14  Call output: undefined type [line: 70]
.   .   .   .   Child: 0  Id a: type int [line: 70]
.   .   .   Sibling: 15  Call output: undefined type [line: 71]
.   .   .   .   Child: 0  Id b: type int [line: 71]
.   .   .   Sibling: 16  Call output: undefined type [line: 72]
.   .   .   .   Child: 0  Id x: type int [line: 72]
.   .   .   Sibling: 17  Call output: undefined type [line: 73]
.   .   .   .   Child: 0  Id y: type int [line: 73]
.   .   .   Sibling: 18  Call output: undefined type [line: 74]
.   .   .   .   Child: 0  Id z: type int [line: 74]
.   .   .   Sibling: 19  Call outnl: undefined type [line: 75]
.   .   .   Sibling: 20  Compound [line: 76]
.   .   .   .   Child: 1  Call output: undefined type [line: 77]
.   .   .   .   .   Child: 0  Id a: type int [line: 77]
.   .   .   .   Sibling: 1  Call output: undefined type [line: 78]
.   .   .   .   .   Child: 0  Id b: type int [line: 78]
.   .   .   .   Sibling: 2  Call output: undefined type [line: 79]
.   .   .   .   .   Child: 0  Id x: type int [line: 79]
.   .   .   .   Sibling: 3  Call output: undefined type [line: 80]
.   .   .   .   .   Child: 0  Id y: type int [line: 80]
.   .   .   .   Sibling: 4  Call output: undefined type [line: 81]
.   .   .   .   .   Child: 0  Id z: type int [line: 81]
.   .   .   .   Sibling: 5  Call outnl: undefined type [line: 82]
.   .   .   .   Sibling: 6  Assign = : type int [line: 84]
.   .   .   .   .   Child: 0  Id a: type int [line: 84]
.   .   .   .   .   Child: 1  Const 16 : type int [line: 84]
.   .   .   .   Sibling: 7  Assign = : type int [line: 85]
.   .   .   .   .   Child: 0  Id b: type int [line: 85]
.   .   .   .   .   Child: 1  Const 17 : type int [line: 85]
.   .   .   .   Sibling: 8  Assign = : type int [line: 86]
.   .   .   .   .   Child: 0  Id x: type int [line: 86]
.   .   .   .   .   Child: 1  Const 18 : type int [line: 86]
.   .   .   .   Sibling: 9  Assign = : type int [line: 87]
.   .   .   .   .   Child: 0  Id y: type int [line: 87]
.   .   .   .   .   Child: 1  Const 19 : type int [line: 87]
.   .   .   .   Sibling: 10  Assign = : type int [line: 88]
.   .   .   .   .   Child: 0  Id z: type int [line: 88]
.   .   .   .   .   Child: 1  Const 20 : type int [line: 88]
.   .   .   .   Sibling: 11  Call output: undefined type [line: 89]
.   .   .   .   .   Child: 0  Id a: type int [line: 89]
.   .   .   .   Sibling: 12  Call output: undefined type [line: 90]
.   .   .   .   .   Child: 0  Id b: type int [line: 90]
.   .   .   .   Sibling: 13  Call output: undefined type [line: 91]
.   .   .   .   .   Child: 0  Id x: type int [line: 91]
.   .   .   .   Sibling: 14  Call output: undefined type [line: 92]
.   .   .   .   .   Child: 0  Id y: type int [line: 92]
.   .   .   .   Sibling: 15  Call output: undefined type [line: 93]
.   .   .   .   .   Child: 0  Id z: type int [line: 93]
.   .   .   .   Sibling: 16  Call outnl: undefined type [line: 94]
.   .   .   Sibling: 21  Call output: undefined type [line: 97]
.   .   .   .   Child: 0  Id a: type int [line: 97]
.   .   .   Sibling: 22  Call output: undefined type [line: 98]
.   .   .   .   Child: 0  Id b: type int [line: 98]
.   .   .   Sibling: 23  Call output: undefined type [line: 99]
.   .   .   .   Child: 0  Id x: type int [line: 99]
.   .   .   Sibling: 24  Call output: undefined type [line: 100]
.   .   .   .   Child: 0  Id y: type int [line: 100]
.   .   .   Sibling: 25  Call output: undefined type [line: 101]
.   .   .   .   Child: 0  Id z: type int [line: 101]
.   .   .   Sibling: 26  Call outnl: undefined type [line: 102]
.   .   .   Sibling: 27  Call agamemnon: type void [line: 104]
.   .   .   Sibling: 28  Call output: undefined type [line: 106]
.   .   .   .   Child: 0  Id a: type int [line: 106]
.   .   .   Sibling: 29  Call output: undefined type [line: 107]
.   .   .   .   Child: 0  Id b: type int [line: 107]
.   .   .   Sibling: 30  Call output: undefined type [line: 108]
.   .   .   .   Child: 0  Id x: type int [line: 108]
.   .   .   Sibling: 31  Call output: undefined type [line: 109]
.   .   .   .   Child: 0  Id y: type int [line: 109]
.   .   .   Sibling: 32  Call output: undefined type [line: 110]
.   .   .   .   Child: 0  Id z: type int [line: 110]
.   .   .   Sibling: 33  Call outnl: undefined type [line: 111]
Number of warnings: 0
Number of errors: 48
