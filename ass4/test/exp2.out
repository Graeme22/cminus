====================================
FILE: exp2.c-
ERROR(22): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(23): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(25): '&' requires operands of type bool but rhs is of type int.
ERROR(25): '&' requires operands of type bool but lhs is of type int.
ERROR(25): '&' requires operands of type bool but rhs is of type int.
ERROR(25): '|' requires operands of type bool but lhs is of type int.
ERROR(25): '|' requires operands of type bool but rhs is of type int.
ERROR(25): '&' requires operands of type bool but lhs is of type int.
ERROR(25): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(26): Unary '!' requires an operand of type bool but was given type int.
ERROR(26): '=' requires operands of the same type but lhs is type int and rhs is type bool.
WARNING(28): Variable z may be uninitialized when used here.
ERROR(36): Variable 'x' is not declared.
WARNING(36): Variable z may be uninitialized when used here.
ERROR(37): Variable 'x' is not declared.
ERROR(39): '+' requires operands of type int but lhs is of type bool.
ERROR(39): '+' requires operands of type int but rhs is of type bool.
ERROR(39): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(40): Variable 'x' is not declared.
ERROR(40): '*' requires operands of type int but lhs is of type bool.
ERROR(40): '*' requires operands of type int but rhs is of type bool.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '*' requires operands of type int but lhs is of type bool.
ERROR(40): Variable 'x' is not declared.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
Var g: type int [line: 3]
Sibling: 1  Func main: returns type void [line: 5]
.   Child: 1  Compound [line: 6]
.   .   Child: 1  Compound [line: 7]
.   .   .   Child: 0  Var x: type int [line: 8]
.   .   .   Sibling: 1  Var y: type int [line: 9]
.   .   .   Child: 1  Assign = : type int [line: 11]
.   .   .   .   Child: 0  Id x: type int [line: 11]
.   .   .   .   Child: 1  Const 11 : type int [line: 11]
.   .   .   Sibling: 1  Assign = : type int [line: 12]
.   .   .   .   Child: 0  Id y: type int [line: 12]
.   .   .   .   Child: 1  Const 12 : type int [line: 12]
.   .   .   Sibling: 2  Assign = : type int [line: 13]
.   .   .   .   Child: 0  Id g: type int [line: 13]
.   .   .   .   Child: 1  Const 13 : type int [line: 13]
.   .   .   Sibling: 3  Assign = : type int [line: 15]
.   .   .   .   Child: 0  Id x: type int [line: 15]
.   .   .   .   Child: 1  Op + : type int [line: 15]
.   .   .   .   .   Child: 0  Op + : type int [line: 15]
.   .   .   .   .   .   Child: 0  Op + : type int [line: 15]
.   .   .   .   .   .   .   Child: 0  Const 3 : type int [line: 15]
.   .   .   .   .   .   .   Child: 1  Op * : type int [line: 15]
.   .   .   .   .   .   .   .   Child: 0  Const 4 : type int [line: 15]
.   .   .   .   .   .   .   .   Child: 1  Id x: type int [line: 15]
.   .   .   .   .   .   Child: 1  Op * : type int [line: 15]
.   .   .   .   .   .   .   Child: 0  Id y: type int [line: 15]
.   .   .   .   .   .   .   Child: 1  Const 7 : type int [line: 15]
.   .   .   .   .   Child: 1  Op * : type int [line: 15]
.   .   .   .   .   .   Child: 0  Id x: type int [line: 15]
.   .   .   .   .   .   Child: 1  Op + : type int [line: 15]
.   .   .   .   .   .   .   Child: 0  Id y: type int [line: 15]
.   .   .   .   .   .   .   Child: 1  Id g: type int [line: 15]
.   .   .   Sibling: 4  Assign = : type int [line: 16]
.   .   .   .   Child: 0  Id x: type int [line: 16]
.   .   .   .   Child: 1  Op - : type int [line: 16]
.   .   .   .   .   Child: 0  Op - : type int [line: 16]
.   .   .   .   .   .   Child: 0  Op - : type int [line: 16]
.   .   .   .   .   .   .   Child: 0  Const 3 : type int [line: 16]
.   .   .   .   .   .   .   Child: 1  Op / : type int [line: 16]
.   .   .   .   .   .   .   .   Child: 0  Const 4 : type int [line: 16]
.   .   .   .   .   .   .   .   Child: 1  Id x: type int [line: 16]
.   .   .   .   .   .   Child: 1  Op / : type int [line: 16]
.   .   .   .   .   .   .   Child: 0  Id y: type int [line: 16]
.   .   .   .   .   .   .   Child: 1  Const 7 : type int [line: 16]
.   .   .   .   .   Child: 1  Op / : type int [line: 16]
.   .   .   .   .   .   Child: 0  Id x: type int [line: 16]
.   .   .   .   .   .   Child: 1  Op - : type int [line: 16]
.   .   .   .   .   .   .   Child: 0  Id y: type int [line: 16]
.   .   .   .   .   .   .   Child: 1  Id g: type int [line: 16]
.   .   .   Sibling: 5  Assign = : type int [line: 17]
.   .   .   .   Child: 0  Id x: type int [line: 17]
.   .   .   .   Child: 1  Op / : type int [line: 17]
.   .   .   .   .   Child: 0  Op % : type int [line: 17]
.   .   .   .   .   .   Child: 0  Op / : type int [line: 17]
.   .   .   .   .   .   .   Child: 0  Op % : type int [line: 17]
.   .   .   .   .   .   .   .   Child: 0  Const 3 : type int [line: 17]
.   .   .   .   .   .   .   .   Child: 1  Const 4 : type int [line: 17]
.   .   .   .   .   .   .   Child: 1  Id x: type int [line: 17]
.   .   .   .   .   .   Child: 1  Op % : type int [line: 17]
.   .   .   .   .   .   .   Child: 0  Op / : type int [line: 17]
.   .   .   .   .   .   .   .   Child: 0  Id y: type int [line: 17]
.   .   .   .   .   .   .   .   Child: 1  Const 7 : type int [line: 17]
.   .   .   .   .   .   .   Child: 1  Id x: type int [line: 17]
.   .   .   .   .   Child: 1  Op % : type int [line: 17]
.   .   .   .   .   .   Child: 0  Id y: type int [line: 17]
.   .   .   .   .   .   Child: 1  Id g: type int [line: 17]
.   .   Sibling: 1  Compound [line: 19]
.   .   .   Child: 0  Var x: type int [line: 20]
.   .   .   Sibling: 1  Var y: type int [line: 20]
.   .   .   Sibling: 2  Var z: array of type int [line: 20]
.   .   .   Child: 1  Assign = : type int [line: 22]
.   .   .   .   Child: 0  Id x: type int [line: 22]
.   .   .   .   Child: 1  Const true : type bool [line: 22]
.   .   .   Sibling: 1  Assign = : type int [line: 23]
.   .   .   .   Child: 0  Id y: type int [line: 23]
.   .   .   .   Child: 1  Const false : type bool [line: 23]
.   .   .   Sibling: 2  Assign = : type int [line: 25]
.   .   .   .   Child: 0  Id x: type int [line: 25]
.   .   .   .   Child: 1  Op | : type bool [line: 25]
.   .   .   .   .   Child: 0  Op | : type bool [line: 25]
.   .   .   .   .   .   Child: 0  Op | : type bool [line: 25]
.   .   .   .   .   .   .   Child: 0  Const true : type bool [line: 25]
.   .   .   .   .   .   .   Child: 1  Op & : type bool [line: 25]
.   .   .   .   .   .   .   .   Child: 0  Const false : type bool [line: 25]
.   .   .   .   .   .   .   .   Child: 1  Id x: type int [line: 25]
.   .   .   .   .   .   Child: 1  Op & : type bool [line: 25]
.   .   .   .   .   .   .   Child: 0  Id y: type int [line: 25]
.   .   .   .   .   .   .   Child: 1  Const 7 : type int [line: 25]
.   .   .   .   .   Child: 1  Op & : type bool [line: 25]
.   .   .   .   .   .   Child: 0  Id x: type int [line: 25]
.   .   .   .   .   .   Child: 1  Op | : type bool [line: 25]
.   .   .   .   .   .   .   Child: 0  Id y: type int [line: 25]
.   .   .   .   .   .   .   Child: 1  Id g: type int [line: 25]
.   .   .   Sibling: 3  Assign = : type int [line: 26]
.   .   .   .   Child: 0  Id x: type int [line: 26]
.   .   .   .   Child: 1  Op | : type bool [line: 26]
.   .   .   .   .   Child: 0  Op ! : type bool [line: 26]
.   .   .   .   .   .   Child: 0  Const true : type bool [line: 26]
.   .   .   .   .   Child: 1  Op ! : type bool [line: 26]
.   .   .   .   .   .   Child: 0  Op ! : type bool [line: 26]
.   .   .   .   .   .   .   Child: 0  Id x: type int [line: 26]
.   .   .   Sibling: 4  Assign = : type int [line: 28]
.   .   .   .   Child: 0  Id x: type int [line: 28]
.   .   .   .   Child: 1  Op [ : type int [line: 28]
.   .   .   .   .   Child: 0  Id z: array of type int [line: 28]
.   .   .   .   .   Child: 1  Const 1 : type int [line: 28]
.   .   .   Sibling: 5  Assign = : type int [line: 29]
.   .   .   .   Child: 0  Op [ : type int [line: 29]
.   .   .   .   .   Child: 0  Id z: array of type int [line: 29]
.   .   .   .   .   Child: 1  Const 1 : type int [line: 29]
.   .   .   .   Child: 1  Id x: type int [line: 29]
.   .   .   Sibling: 6  Assign = : type int [line: 30]
.   .   .   .   Child: 0  Op [ : type int [line: 30]
.   .   .   .   .   Child: 0  Id z: array of type int [line: 30]
.   .   .   .   .   Child: 1  Const 1 : type int [line: 30]
.   .   .   .   Child: 1  Op [ : type int [line: 30]
.   .   .   .   .   Child: 0  Id z: array of type int [line: 30]
.   .   .   .   .   Child: 1  Const 2 : type int [line: 30]
.   .   .   Sibling: 7  Assign = : type int [line: 31]
.   .   .   .   Child: 0  Op [ : type int [line: 31]
.   .   .   .   .   Child: 0  Id z: array of type int [line: 31]
.   .   .   .   .   Child: 1  Const 1 : type int [line: 31]
.   .   .   .   Child: 1  Op + : type int [line: 31]
.   .   .   .   .   Child: 0  Op [ : type int [line: 31]
.   .   .   .   .   .   Child: 0  Id z: array of type int [line: 31]
.   .   .   .   .   .   Child: 1  Const 2 : type int [line: 31]
.   .   .   .   .   Child: 1  Op [ : type int [line: 31]
.   .   .   .   .   .   Child: 0  Id z: array of type int [line: 31]
.   .   .   .   .   .   Child: 1  Const 3 : type int [line: 31]
.   .   Sibling: 2  Compound [line: 33]
.   .   .   Child: 0  Var z: array of type bool [line: 34]
.   .   .   Child: 1  Assign = : undefined type [line: 36]
.   .   .   .   Child: 0  Id x: undefined type [line: 36]
.   .   .   .   Child: 1  Op [ : type bool [line: 36]
.   .   .   .   .   Child: 0  Id z: array of type bool [line: 36]
.   .   .   .   .   Child: 1  Const 1 : type int [line: 36]
.   .   .   Sibling: 1  Assign = : type bool [line: 37]
.   .   .   .   Child: 0  Op [ : type bool [line: 37]
.   .   .   .   .   Child: 0  Id z: array of type bool [line: 37]
.   .   .   .   .   Child: 1  Const 1 : type int [line: 37]
.   .   .   .   Child: 1  Id x: undefined type [line: 37]
.   .   .   Sibling: 2  Assign = : type bool [line: 38]
.   .   .   .   Child: 0  Op [ : type bool [line: 38]
.   .   .   .   .   Child: 0  Id z: array of type bool [line: 38]
.   .   .   .   .   Child: 1  Const 1 : type int [line: 38]
.   .   .   .   Child: 1  Op [ : type bool [line: 38]
.   .   .   .   .   Child: 0  Id z: array of type bool [line: 38]
.   .   .   .   .   Child: 1  Const 2 : type int [line: 38]
.   .   .   Sibling: 3  Assign = : type bool [line: 39]
.   .   .   .   Child: 0  Op [ : type bool [line: 39]
.   .   .   .   .   Child: 0  Id z: array of type bool [line: 39]
.   .   .   .   .   Child: 1  Const 1 : type int [line: 39]
.   .   .   .   Child: 1  Op + : type int [line: 39]
.   .   .   .   .   Child: 0  Op [ : type bool [line: 39]
.   .   .   .   .   .   Child: 0  Id z: array of type bool [line: 39]
.   .   .   .   .   .   Child: 1  Const 2 : type int [line: 39]
.   .   .   .   .   Child: 1  Op [ : type bool [line: 39]
.   .   .   .   .   .   Child: 0  Id z: array of type bool [line: 39]
.   .   .   .   .   .   Child: 1  Const 3 : type int [line: 39]
.   .   .   Sibling: 4  Assign = : undefined type [line: 40]
.   .   .   .   Child: 0  Id x: undefined type [line: 40]
.   .   .   .   Child: 1  Op + : type int [line: 40]
.   .   .   .   .   Child: 0  Op + : type int [line: 40]
.   .   .   .   .   .   Child: 0  Op + : type int [line: 40]
.   .   .   .   .   .   .   Child: 0  Op [ : type bool [line: 40]
.   .   .   .   .   .   .   .   Child: 0  Id z: array of type bool [line: 40]
.   .   .   .   .   .   .   .   Child: 1  Const 1 : type int [line: 40]
.   .   .   .   .   .   .   Child: 1  Op * : type int [line: 40]
.   .   .   .   .   .   .   .   Child: 0  Op [ : type bool [line: 40]
.   .   .   .   .   .   .   .   .   Child: 0  Id z: array of type bool [line: 40]
.   .   .   .   .   .   .   .   .   Child: 1  Const 2 : type int [line: 40]
.   .   .   .   .   .   .   .   Child: 1  Op [ : type bool [line: 40]
.   .   .   .   .   .   .   .   .   Child: 0  Id z: array of type bool [line: 40]
.   .   .   .   .   .   .   .   .   Child: 1  Const 0 : type int [line: 40]
.   .   .   .   .   .   Child: 1  Op * : type int [line: 40]
.   .   .   .   .   .   .   Child: 0  Op [ : type bool [line: 40]
.   .   .   .   .   .   .   .   Child: 0  Id z: array of type bool [line: 40]
.   .   .   .   .   .   .   .   Child: 1  Const 3 : type int [line: 40]
.   .   .   .   .   .   .   Child: 1  Const 7 : type int [line: 40]
.   .   .   .   .   Child: 1  Op * : type int [line: 40]
.   .   .   .   .   .   Child: 0  Id x: undefined type [line: 40]
.   .   .   .   .   .   Child: 1  Op + : type int [line: 40]
.   .   .   .   .   .   .   Child: 0  Op [ : type bool [line: 40]
.   .   .   .   .   .   .   .   Child: 0  Id z: array of type bool [line: 40]
.   .   .   .   .   .   .   .   Child: 1  Const 4 : type int [line: 40]
.   .   .   .   .   .   .   Child: 1  Id g: type int [line: 40]
.   .   Sibling: 3  Assign = : type int [line: 43]
.   .   .   Child: 0  Id g: type int [line: 43]
.   .   .   Child: 1  Assign = : type int [line: 43]
.   .   .   .   Child: 0  Id g: type int [line: 43]
.   .   .   .   Child: 1  Assign = : type int [line: 43]
.   .   .   .   .   Child: 0  Id g: type int [line: 43]
.   .   .   .   .   Child: 1  Const 3 : type int [line: 43]
Number of warnings: 2
Number of errors: 23
