====================================
FILE: basicAll5.c-
ERROR(13): Symbol 'x' is already declared at line 11.
ERROR(17): Function 'cat' is not declared.
WARNING(19): Variable b may be uninitialized when used here.
ERROR(19): Function 'dog' at line 11 is expecting to return type char but got type int.
WARNING(11): The variable x seems not to be used.
ERROR(22): Symbol 'dog' is already declared at line 11.
WARNING(25): The variable x seems not to be used.
WARNING(22): Expecting to return type int but function 'dog' has no return statement.
WARNING(22): The variable x seems not to be used.
ERROR(31): Variable 'b' is of type int but is being initialized with an expression of type char.
ERROR(33): Initializer for variable 'd' is not a constant expression.
ERROR(36): Function 'cat' at line 29 is expecting to return type char but return has no return value.
WARNING(32): The variable c seems not to be used.
WARNING(33): The variable d seems not to be used.
WARNING(34): The variable e seems not to be used.
WARNING(29): The variable x seems not to be used.
ERROR(39): Symbol 'cat' is already declared at line 29.
ERROR(45): Function 'ibex' at line 42 is expecting to return type int but got type bool.
WARNING(44): The variable unusedLocal seems not to be used.
WARNING(42): The variable x seems not to be used.
ERROR(50): Function 'ox' at line 48 is expecting no return value, but return has return value.
WARNING(48): The variable y seems not to be used.
WARNING(53): Expecting to return type char but function 'emu' has no return statement.
WARNING(53): The variable x seems not to be used.
WARNING(53): The variable y seems not to be used.
WARNING(53): The variable z seems not to be used.
ERROR(60): Symbol 'x' is already declared at line 59.
ERROR(61): Symbol 'x' is already declared at line 59.
ERROR(70): Variable 'v' is not declared.
WARNING(72): Variable x may be uninitialized when used here.
ERROR(72): Expecting Boolean test condition in if statement but got type char.
ERROR(73): Expecting Boolean test condition in while statement but got type char.
ERROR(74): Expecting Boolean test condition in while statement but got type int.
ERROR(76): Cannot use function 'cat' as a variable.
WARNING(77): Variable b may be uninitialized when used here.
ERROR(77): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(78): '+=' requires operands of type int but lhs is of type char.
ERROR(79): '-=' requires operands of type int but rhs is of type char.
ERROR(80): '>' requires operands of the same type but lhs is type int and rhs is type char.
WARNING(83): Variable bb may be uninitialized when used here.
ERROR(83): Expecting Boolean test condition in if statement but got type int.
ERROR(83): Cannot use array as test condition in if statement.
ERROR(84): Expecting Boolean test condition in if statement but got type int.
ERROR(84): Cannot use array as test condition in if statement.
ERROR(85): Expecting Boolean test condition in while statement but got type int.
ERROR(85): Cannot use array as test condition in while statement.
ERROR(87): Cannot have a break statement outside of loop.
ERROR(89): Expecting Boolean test condition in while statement but got type int.
ERROR(90): Expecting Boolean test condition in while statement but got type int.
ERROR(90): Expecting Boolean test condition in while statement but got type int.
WARNING(92): Variable aa may be uninitialized when used here.
ERROR(92): '+' requires operands of type int but lhs is of type char.
ERROR(92): The operation '+' does not work with arrays.
WARNING(93): Variable zz may be uninitialized when used here.
WARNING(94): Variable cc may be uninitialized when used here.
ERROR(96): '==' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(97): '==' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(98): '==' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(100): '+' requires operands of type int but lhs is of type bool.
ERROR(100): '+' requires operands of type int but rhs is of type char.
ERROR(102): '*' requires operands of type int but lhs is of type char.
ERROR(102): '*' requires operands of type int but rhs is of type bool.
ERROR(104): Unary '!' requires an operand of type bool but was given type char.
ERROR(105): '+' requires operands of type int but lhs is of type char.
ERROR(105): Unary '!' requires an operand of type bool but was given type int.
ERROR(108): Cannot index nonarray 'x'.
ERROR(110): '&' requires operands of type bool but lhs is of type char.
ERROR(110): '&' requires operands of type bool but rhs is of type char.
ERROR(110): '*' requires operands of type int but lhs is of type char.
ERROR(110): '*' requires operands of type int but rhs is of type bool.
ERROR(110): '+' requires operands of type int but lhs is of type char.
ERROR(110): '==' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(110): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(111): Variable 'y' is not declared.
ERROR(111): '&' requires operands of type bool but lhs is of type char.
ERROR(111): '*' requires operands of type int but lhs is of type char.
ERROR(111): '*' requires operands of type int but rhs is of type bool.
ERROR(111): '+' requires operands of type int but lhs is of type char.
ERROR(111): '==' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(111): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(112): '&' requires operands of type bool but lhs is of type char.
ERROR(112): '&' requires operands of type bool but rhs is of type char.
ERROR(112): '*' requires operands of type int but lhs is of type char.
ERROR(112): '*' requires operands of type int but rhs is of type bool.
ERROR(112): '|' requires operands of type bool but rhs is of type int.
ERROR(112): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(114): The operation '*' only works with arrays.
ERROR(115): '&' requires operands of type bool but lhs is of type int.
ERROR(115): '&' requires operands of type bool but rhs is of type int.
ERROR(121): Cannot use function 'cat' as a variable.
ERROR(123): Array 'aa' should be indexed by type int but got type char.
ERROR(123): Array index is the unindexed array 'aa'.
ERROR(124): Variable 'AA' is not declared.
ERROR(124): Cannot index nonarray 'AA'.
ERROR(126): Variable 'meerkat' is not declared.
ERROR(128): Variable 'xyzzy' is not declared.
ERROR(129): Function 'meerkat' is not declared.
ERROR(130): Variable 'xyzzy' is not declared.
ERROR(130): '&' requires operands of type bool but rhs is of type int.
ERROR(132): Function 'flight' is not declared.
ERROR(132): Unary '!' requires an operand of type bool but was given type int.
ERROR(132): Unary '-' requires an operand of type int but was given type bool.
ERROR(132): Variable 'uu' is not declared.
ERROR(132): Variable 'y' is not declared.
ERROR(132): '*' requires operands of type int but lhs is of type char.
ERROR(132): '+' requires operands of type int but lhs is of type char.
ERROR(134): 'x' is a simple variable and cannot be called.
ERROR(136): Expecting type char in parameter 1 of call to 'dog' declared on line 11 but got type int.
ERROR(136): Too many parameters passed for function 'dog' declared on line 11.
ERROR(137): Too few parameters passed for function 'ibex' declared on line 42.
ERROR(139): Expecting type char in parameter 1 of call to 'dog' declared on line 11 but got type bool.
ERROR(141): Not expecting array in parameter 1 of call to 'cat' declared on line 29.
WARNING(142): Variable ba may be uninitialized when used here.
ERROR(142): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type bool.
ERROR(142): Not expecting array in parameter 1 of call to 'cat' declared on line 29.
ERROR(144): Expecting array in parameter 1 of call to 'ibex' declared on line 42.
ERROR(145): Expecting type char in parameter 1 of call to 'ibex' declared on line 42 but got type int.
ERROR(146): Cannot use function 'ibex' as a variable.
ERROR(146): Cannot index nonarray 'ibex'.
ERROR(148): Cannot use function 'ibex' as a variable.
ERROR(149): Cannot use function 'ibex' as a variable.
ERROR(151): Array 'aa' should be indexed by type int but got type char.
ERROR(152): Array 'aa' should be indexed by type int but got type char.
ERROR(152): Array index is the unindexed array 'zz'.
ERROR(153): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type bool.
ERROR(153): Array 'aa' should be indexed by type int but got type void.
ERROR(154): Array 'aa' should be indexed by type int but got type char.
ERROR(155): Array 'aa' should be indexed by type int but got type bool.
ERROR(156): Cannot use function 'ox' as a variable.
ERROR(157): Cannot use function 'ibex' as a variable.
ERROR(159): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(159): '=' requires operands of the same type but lhs is type char and rhs is type void.
ERROR(160): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(160): '+' requires operands of type int but lhs is of type char.
ERROR(160): '+' requires operands of type int but rhs is of type void.
ERROR(160): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(161): Expecting type char in parameter 1 of call to 'ox' declared on line 48 but got type int.
ERROR(161): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type void.
ERROR(162): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type bool.
ERROR(163): Expecting type char in parameter 1 of call to 'cat' declared on line 29 but got type int.
ERROR(165): '=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(167): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(167): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(167): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(169): '*' requires operands of type int but lhs is of type char.
ERROR(169): '*' requires operands of type int but rhs is of type char.
ERROR(169): '&' requires operands of type bool but lhs is of type int.
ERROR(169): '&' requires operands of type bool but rhs is of type int.
ERROR(171): '+' requires operands of type int but lhs is of type char.
ERROR(171): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type int.
ERROR(171): Variable 'parrot' is not declared.
ERROR(171): '&' requires operands of type bool but lhs is of type int.
ERROR(171): '&' requires operands of type bool but rhs is of type char.
ERROR(171): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(172): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type bool.
ERROR(172): '+' requires operands of type int but lhs is of type char.
ERROR(172): Expecting type char in parameter 1 of call to 'emu' declared on line 53 but got type int.
ERROR(172): Variable 'parrot' is not declared.
ERROR(172): '&' requires operands of type bool but lhs is of type int.
ERROR(172): '&' requires operands of type bool but rhs is of type char.
ERROR(172): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(172): '&' requires operands of type bool but rhs is of type char.
ERROR(172): Expecting type char in parameter 2 of call to 'emu' declared on line 53 but got type bool.
ERROR(172): Expecting type char in parameter 3 of call to 'emu' declared on line 53 but got type bool.
ERROR(172): Too many parameters passed for function 'emu' declared on line 53.
ERROR(172): '*' requires operands of type int but lhs is of type char.
ERROR(176): Cannot return an array.
WARNING(68): The variable c seems not to be used.
WARNING(59): The variable yuri seems not to be used.
ERROR(LINKER): Procedure main is not declared.
Func dog: returns type char [line: 11]
.   Child: 0  Param x: type char [line: 11]
.   Child: 1  Compound [line: 12]
.   .   Child: 0  Var x: type char [line: 13]
.   .   Sibling: 1  Var b: type int [line: 15]
.   .   Child: 1  Call cat: undefined type [line: 17]
.   .   .   Child: 0  Const 10 : type int [line: 17]
.   .   Sibling: 1  Return [line: 19]
.   .   .   Child: 0  Id b: type int [line: 19]
Sibling: 1  Func dog: returns type int [line: 22]
.   Child: 0  Param x: type int [line: 22]
.   Child: 1  Compound [line: 23]
.   .   Child: 1  Compound [line: 24]
.   .   .   Child: 0  Var x: type int [line: 25]
Sibling: 2  Func cat: returns type char [line: 29]
.   Child: 0  Param x: type char [line: 29]
.   Child: 1  Compound [line: 30]
.   .   Child: 0  Var b: type int [line: 31]
.   .   .   Child: 0  Const: 'a' : type char [line: 31]
.   .   Sibling: 1  Var c: type int [line: 32]
.   .   .   Child: 0  Op + : type int [line: 32]
.   .   .   .   Child: 0  Const 3 : type int [line: 32]
.   .   .   .   Child: 1  Op * : type int [line: 32]
.   .   .   .   .   Child: 0  Const 4 : type int [line: 32]
.   .   .   .   .   Child: 1  Const 9 : type int [line: 32]
.   .   Sibling: 2  Var d: type int [line: 33]
.   .   .   Child: 0  Id b: type int [line: 33]
.   .   Sibling: 3  Var e: type int [line: 34]
.   .   .   Child: 0  Op ? : type int [line: 34]
.   .   .   .   Child: 0  Const 3 : type int [line: 34]
.   .   Child: 1  Return [line: 36]
Sibling: 3  Var cat: type char [line: 39]
Sibling: 4  Var unusedGlobal: type char [line: 40]
Sibling: 5  Func ibex: returns type int [line: 42]
.   Child: 0  Param x: array of type char [line: 42]
.   Child: 1  Compound [line: 43]
.   .   Child: 0  Var unusedLocal: type char [line: 44]
.   .   Child: 1  Return [line: 45]
.   .   .   Child: 0  Const true : type bool [line: 45]
Sibling: 6  Func ox: returns type void [line: 48]
.   Child: 0  Param y: type char [line: 48]
.   Child: 1  Compound [line: 49]
.   .   Child: 1  Return [line: 50]
.   .   .   Child: 0  Const 666 : type int [line: 50]
Sibling: 7  Func emu: returns type char [line: 53]
.   Child: 0  Param x: type char [line: 53]
.   Sibling: 1  Param y: type char [line: 53]
.   Sibling: 2  Param z: type char [line: 53]
.   Child: 1  Compound [line: 54]
Sibling: 8  Func mane: returns type char [line: 57]
.   Child: 1  Compound [line: 58]
.   .   Child: 0  Var x: type char [line: 59]
.   .   Sibling: 1  Var yuri: type char [line: 59]
.   .   Sibling: 2  Var x: type char [line: 60]
.   .   Sibling: 3  Var x: type int [line: 61]
.   .   Sibling: 4  Var ba: array of type bool [line: 63]
.   .   Sibling: 5  Var aa: array of type char [line: 64]
.   .   Sibling: 6  Var zz: array of type char [line: 65]
.   .   Sibling: 7  Var bb: array of type int [line: 66]
.   .   Sibling: 8  Var cc: array of type int [line: 66]
.   .   Sibling: 9  Var b: type int [line: 68]
.   .   Sibling: 10  Var c: type int [line: 68]
.   .   Child: 1  Id v: undefined type [line: 70]
.   .   Sibling: 1  If [line: 72]
.   .   .   Child: 0  Id x: type char [line: 72]
.   .   .   Child: 1  Id x: type char [line: 72]
.   .   Sibling: 2  While [line: 73]
.   .   .   Child: 0  Id x: type char [line: 73]
.   .   .   Child: 1  Id x: type char [line: 73]
.   .   Sibling: 3  While [line: 74]
.   .   .   Child: 0  Const 10 : type int [line: 74]
.   .   .   Child: 1  Id x: type char [line: 74]
.   .   Sibling: 4  Assign = : type char [line: 76]
.   .   .   Child: 0  Id x: type char [line: 76]
.   .   .   Child: 1  Id cat: undefined type [line: 76]
.   .   Sibling: 5  Assign = : type char [line: 77]
.   .   .   Child: 0  Id x: type char [line: 77]
.   .   .   Child: 1  Id b: type int [line: 77]
.   .   Sibling: 6  Assign += : type int [line: 78]
.   .   .   Child: 0  Id x: type char [line: 78]
.   .   .   Child: 1  Id b: type int [line: 78]
.   .   Sibling: 7  Assign -= : type int [line: 79]
.   .   .   Child: 0  Id b: type int [line: 79]
.   .   .   Child: 1  Id x: type char [line: 79]
.   .   Sibling: 8  Op > : type bool [line: 80]
.   .   .   Child: 0  Id b: type int [line: 80]
.   .   .   Child: 1  Id x: type char [line: 80]
.   .   Sibling: 9  Assign ++ : type int [line: 81]
.   .   .   Child: 0  Id b: type int [line: 81]
.   .   Sibling: 10  If [line: 83]
.   .   .   Child: 0  Id bb: array of type int [line: 83]
.   .   .   Child: 1  Id x: type char [line: 83]
.   .   .   Child: 2  If [line: 84]
.   .   .   .   Child: 0  Id bb: array of type int [line: 84]
.   .   .   .   Child: 1  Id x: type char [line: 84]
.   .   Sibling: 11  While [line: 85]
.   .   .   Child: 0  Id bb: array of type int [line: 85]
.   .   .   Child: 1  Id x: type char [line: 85]
.   .   Sibling: 12  Break [line: 87]
.   .   Sibling: 13  While [line: 89]
.   .   .   Child: 0  Id b: type int [line: 89]
.   .   .   Child: 1  Compound [line: 89]
.   .   .   .   Child: 1  Break [line: 89]
.   .   Sibling: 14  While [line: 90]
.   .   .   Child: 0  Id b: type int [line: 90]
.   .   .   Child: 1  Compound [line: 90]
.   .   .   .   Child: 1  While [line: 90]
.   .   .   .   .   Child: 0  Id b: type int [line: 90]
.   .   .   .   .   Child: 1  Const 666 : type int [line: 90]
.   .   .   .   Sibling: 1  Break [line: 90]
.   .   Sibling: 15  Op + : type int [line: 92]
.   .   .   Child: 0  Id aa: array of type char [line: 92]
.   .   .   Child: 1  Const 6 : type int [line: 92]
.   .   Sibling: 16  Op < : type bool [line: 93]
.   .   .   Child: 0  Id aa: array of type char [line: 93]
.   .   .   Child: 1  Id zz: array of type char [line: 93]
.   .   Sibling: 17  Op < : type bool [line: 94]
.   .   .   Child: 0  Id bb: array of type int [line: 94]
.   .   .   Child: 1  Id cc: array of type int [line: 94]
.   .   Sibling: 18  Op == : type bool [line: 96]
.   .   .   Child: 0  Id x: type char [line: 96]
.   .   .   Child: 1  Const true : type bool [line: 96]
.   .   Sibling: 19  Op == : type bool [line: 97]
.   .   .   Child: 0  Id x: type char [line: 97]
.   .   .   Child: 1  Const 1 : type int [line: 97]
.   .   Sibling: 20  Op == : type bool [line: 98]
.   .   .   Child: 0  Id b: type int [line: 98]
.   .   .   Child: 1  Const true : type bool [line: 98]
.   .   Sibling: 21  Op + : type int [line: 100]
.   .   .   Child: 0  Const false : type bool [line: 100]
.   .   .   Child: 1  Id x: type char [line: 100]
.   .   Sibling: 22  Op * : type int [line: 102]
.   .   .   Child: 0  Id x: type char [line: 102]
.   .   .   Child: 1  Const false : type bool [line: 102]
.   .   Sibling: 23  Op ! : type bool [line: 104]
.   .   .   Child: 0  Id x: type char [line: 104]
.   .   Sibling: 24  Op ! : type bool [line: 105]
.   .   .   Child: 0  Op + : type int [line: 105]
.   .   .   .   Child: 0  Id x: type char [line: 105]
.   .   .   .   Child: 1  Id b: type int [line: 105]
.   .   Sibling: 25  Op - : type int [line: 106]
.   .   .   Child: 0  Id b: type int [line: 106]
.   .   Sibling: 26  Op [ : type char [line: 108]
.   .   .   Child: 0  Id x: type char [line: 108]
.   .   .   Child: 1  Const 496 : type int [line: 108]
.   .   Sibling: 27  Assign = : type int [line: 110]
.   .   .   Child: 0  Id b: type int [line: 110]
.   .   .   Child: 1  Op == : type bool [line: 110]
.   .   .   .   Child: 0  Id x: type char [line: 110]
.   .   .   .   Child: 1  Op + : type int [line: 110]
.   .   .   .   .   Child: 0  Id x: type char [line: 110]
.   .   .   .   .   Child: 1  Op * : type int [line: 110]
.   .   .   .   .   .   Child: 0  Id x: type char [line: 110]
.   .   .   .   .   .   Child: 1  Op & : type bool [line: 110]
.   .   .   .   .   .   .   Child: 0  Id x: type char [line: 110]
.   .   .   .   .   .   .   Child: 1  Id x: type char [line: 110]
.   .   Sibling: 28  Assign = : type int [line: 111]
.   .   .   Child: 0  Id b: type int [line: 111]
.   .   .   Child: 1  Op == : type bool [line: 111]
.   .   .   .   Child: 0  Id x: type char [line: 111]
.   .   .   .   Child: 1  Op + : type int [line: 111]
.   .   .   .   .   Child: 0  Id x: type char [line: 111]
.   .   .   .   .   Child: 1  Op * : type int [line: 111]
.   .   .   .   .   .   Child: 0  Id x: type char [line: 111]
.   .   .   .   .   .   Child: 1  Op & : type bool [line: 111]
.   .   .   .   .   .   .   Child: 0  Id x: type char [line: 111]
.   .   .   .   .   .   .   Child: 1  Id y: undefined type [line: 111]
.   .   Sibling: 29  Assign = : type int [line: 112]
.   .   .   Child: 0  Id b: type int [line: 112]
.   .   .   Child: 1  Op | : type bool [line: 112]
.   .   .   .   Child: 0  Op == : type bool [line: 112]
.   .   .   .   .   Child: 0  Id x: type char [line: 112]
.   .   .   .   .   Child: 1  Id x: type char [line: 112]
.   .   .   .   Child: 1  Op * : type int [line: 112]
.   .   .   .   .   Child: 0  Id x: type char [line: 112]
.   .   .   .   .   Child: 1  Op & : type bool [line: 112]
.   .   .   .   .   .   Child: 0  Id x: type char [line: 112]
.   .   .   .   .   .   Child: 1  Id x: type char [line: 112]
.   .   Sibling: 30  Op * : type int [line: 114]
.   .   .   Child: 0  Id x: type char [line: 114]
.   .   Sibling: 31  Op & : type bool [line: 115]
.   .   .   Child: 0  Op * : type int [line: 115]
.   .   .   .   Child: 0  Id aa: array of type char [line: 115]
.   .   .   Child: 1  Id b: type int [line: 115]
.   .   Sibling: 32  Op [ : type char [line: 116]
.   .   .   Child: 0  Id aa: array of type char [line: 116]
.   .   .   Child: 1  Op * : type int [line: 116]
.   .   .   .   Child: 0  Id aa: array of type char [line: 116]
.   .   Sibling: 33  Op [ : type char [line: 117]
.   .   .   Child: 0  Id aa: array of type char [line: 117]
.   .   .   Child: 1  Const 666 : type int [line: 117]
.   .   Sibling: 34  Op [ : type char [line: 119]
.   .   .   Child: 0  Id aa: array of type char [line: 119]
.   .   .   Child: 1  Id b: type int [line: 119]
.   .   Sibling: 35  Op [ : type char [line: 121]
.   .   .   Child: 0  Id aa: array of type char [line: 121]
.   .   .   Child: 1  Id cat: undefined type [line: 121]
.   .   Sibling: 36  Op [ : type char [line: 123]
.   .   .   Child: 0  Id aa: array of type char [line: 123]
.   .   .   Child: 1  Id aa: array of type char [line: 123]
.   .   Sibling: 37  Op [ : undefined type [line: 124]
.   .   .   Child: 0  Id AA: undefined type [line: 124]
.   .   .   Child: 1  Const 1 : type int [line: 124]
.   .   Sibling: 38  Op [ : type char [line: 126]
.   .   .   Child: 0  Id aa: array of type char [line: 126]
.   .   .   Child: 1  Id meerkat: undefined type [line: 126]
.   .   Sibling: 39  Id xyzzy: undefined type [line: 128]
.   .   Sibling: 40  Call meerkat: undefined type [line: 129]
.   .   Sibling: 41  Op & : type bool [line: 130]
.   .   .   Child: 0  Const true : type bool [line: 130]
.   .   .   Child: 1  Op / : type int [line: 130]
.   .   .   .   Child: 0  Id xyzzy: undefined type [line: 130]
.   .   .   .   Child: 1  Const 666 : type int [line: 130]
.   .   Sibling: 42  Call flight: undefined type [line: 132]
.   .   .   Child: 0  Op ! : type bool [line: 132]
.   .   .   .   Child: 0  Const 5 : type int [line: 132]
.   .   .   Sibling: 1  Op - : type int [line: 132]
.   .   .   .   Child: 0  Const true : type bool [line: 132]
.   .   .   Sibling: 2  Id uu: undefined type [line: 132]
.   .   .   Sibling: 3  Id y: undefined type [line: 132]
.   .   .   Sibling: 4  Op + : type int [line: 132]
.   .   .   .   Child: 0  Id x: type char [line: 132]
.   .   .   .   Child: 1  Op * : type int [line: 132]
.   .   .   .   .   Child: 0  Id x: type char [line: 132]
.   .   .   .   .   Child: 1  Id b: type int [line: 132]
.   .   Sibling: 43  Call x: undefined type [line: 134]
.   .   Sibling: 44  Call dog: type char [line: 136]
.   .   .   Child: 0  Const 3 : type int [line: 136]
.   .   .   Sibling: 1  Const 5 : type int [line: 136]
.   .   Sibling: 45  Call ibex: type int [line: 137]
.   .   Sibling: 46  Call dog: type char [line: 139]
.   .   .   Child: 0  Const true : type bool [line: 139]
.   .   Sibling: 47  Call cat: type char [line: 141]
.   .   .   Child: 0  Id aa: array of type char [line: 141]
.   .   Sibling: 48  Call cat: type char [line: 142]
.   .   .   Child: 0  Id ba: array of type bool [line: 142]
.   .   Sibling: 49  Call ibex: type int [line: 144]
.   .   .   Child: 0  Id x: type char [line: 144]
.   .   Sibling: 50  Call ibex: type int [line: 145]
.   .   .   Child: 0  Id bb: array of type int [line: 145]
.   .   Sibling: 51  Op [ : undefined type [line: 146]
.   .   .   Child: 0  Id ibex: undefined type [line: 146]
.   .   .   Child: 1  Const 3 : type int [line: 146]
.   .   Sibling: 52  Op + : type int [line: 148]
.   .   .   Child: 0  Id ibex: undefined type [line: 148]
.   .   .   Child: 1  Const 4 : type int [line: 148]
.   .   Sibling: 53  Id ibex: undefined type [line: 149]
.   .   Sibling: 54  Op [ : type char [line: 151]
.   .   .   Child: 0  Id aa: array of type char [line: 151]
.   .   .   Child: 1  Op [ : type char [line: 151]
.   .   .   .   Child: 0  Id zz: array of type char [line: 151]
.   .   .   .   Child: 1  Const 1 : type int [line: 151]
.   .   Sibling: 55  Op [ : type char [line: 152]
.   .   .   Child: 0  Id aa: array of type char [line: 152]
.   .   .   Child: 1  Id zz: array of type char [line: 152]
.   .   Sibling: 56  Op [ : type char [line: 153]
.   .   .   Child: 0  Id aa: array of type char [line: 153]
.   .   .   Child: 1  Call ox: type void [line: 153]
.   .   .   .   Child: 0  Const true : type bool [line: 153]
.   .   Sibling: 57  Op [ : type char [line: 154]
.   .   .   Child: 0  Id aa: array of type char [line: 154]
.   .   .   Child: 1  Const: 'x' : type char [line: 154]
.   .   Sibling: 58  Op [ : type char [line: 155]
.   .   .   Child: 0  Id aa: array of type char [line: 155]
.   .   .   Child: 1  Const false : type bool [line: 155]
.   .   Sibling: 59  Op [ : type char [line: 156]
.   .   .   Child: 0  Id aa: array of type char [line: 156]
.   .   .   Child: 1  Id ox: undefined type [line: 156]
.   .   Sibling: 60  Op [ : type char [line: 157]
.   .   .   Child: 0  Id aa: array of type char [line: 157]
.   .   .   Child: 1  Id ibex: undefined type [line: 157]
.   .   Sibling: 61  Assign = : type char [line: 159]
.   .   .   Child: 0  Id x: type char [line: 159]
.   .   .   Child: 1  Call ox: type void [line: 159]
.   .   .   .   Child: 0  Const 28 : type int [line: 159]
.   .   Sibling: 62  Assign = : type char [line: 160]
.   .   .   Child: 0  Id x: type char [line: 160]
.   .   .   Child: 1  Op + : type int [line: 160]
.   .   .   .   Child: 0  Id x: type char [line: 160]
.   .   .   .   Child: 1  Call ox: type void [line: 160]
.   .   .   .   .   Child: 0  Const 6 : type int [line: 160]
.   .   Sibling: 63  Call cat: type char [line: 161]
.   .   .   Child: 0  Call ox: type void [line: 161]
.   .   .   .   Child: 0  Const 492 : type int [line: 161]
.   .   Sibling: 64  Call cat: type char [line: 162]
.   .   .   Child: 0  Const true : type bool [line: 162]
.   .   Sibling: 65  Call cat: type char [line: 163]
.   .   .   Child: 0  Call cat: type char [line: 163]
.   .   .   .   Child: 0  Const 492 : type int [line: 163]
.   .   Sibling: 66  Assign = : type char [line: 165]
.   .   .   Child: 0  Id x: type char [line: 165]
.   .   .   Child: 1  Assign = : type char [line: 165]
.   .   .   .   Child: 0  Id x: type char [line: 165]
.   .   .   .   Child: 1  Const true : type bool [line: 165]
.   .   Sibling: 67  Assign = : type int [line: 166]
.   .   .   Child: 0  Id b: type int [line: 166]
.   .   .   Child: 1  Assign = : type int [line: 166]
.   .   .   .   Child: 0  Id b: type int [line: 166]
.   .   .   .   Child: 1  Const 666 : type int [line: 166]
.   .   Sibling: 68  Assign = : type char [line: 167]
.   .   .   Child: 0  Id x: type char [line: 167]
.   .   .   Child: 1  Assign = : type int [line: 167]
.   .   .   .   Child: 0  Id b: type int [line: 167]
.   .   .   .   Child: 1  Assign = : type char [line: 167]
.   .   .   .   .   Child: 0  Id x: type char [line: 167]
.   .   .   .   .   Child: 1  Id b: type int [line: 167]
.   .   Sibling: 69  Op & : type bool [line: 169]
.   .   .   Child: 0  Op * : type int [line: 169]
.   .   .   .   Child: 0  Id x: type char [line: 169]
.   .   .   .   Child: 1  Id b: type int [line: 169]
.   .   .   Child: 1  Op * : type int [line: 169]
.   .   .   .   Child: 0  Id b: type int [line: 169]
.   .   .   .   Child: 1  Id x: type char [line: 169]
.   .   Sibling: 70  Call emu: type char [line: 171]
.   .   .   Child: 0  Op + : type int [line: 171]
.   .   .   .   Child: 0  Id x: type char [line: 171]
.   .   .   .   Child: 1  Id b: type int [line: 171]
.   .   .   Sibling: 1  Id parrot: undefined type [line: 171]
.   .   .   Sibling: 2  Op & : type bool [line: 171]
.   .   .   .   Child: 0  Id b: type int [line: 171]
.   .   .   .   Child: 1  Id x: type char [line: 171]
.   .   Sibling: 71  Call emu: type char [line: 172]
.   .   .   Child: 0  Const false : type bool [line: 172]
.   .   .   Sibling: 1  Op & : type bool [line: 172]
.   .   .   .   Child: 0  Const true : type bool [line: 172]
.   .   .   .   Child: 1  Call emu: type char [line: 172]
.   .   .   .   .   Child: 0  Op + : type int [line: 172]
.   .   .   .   .   .   Child: 0  Id x: type char [line: 172]
.   .   .   .   .   .   Child: 1  Id b: type int [line: 172]
.   .   .   .   .   Sibling: 1  Id parrot: undefined type [line: 172]
.   .   .   .   .   Sibling: 2  Op & : type bool [line: 172]
.   .   .   .   .   .   Child: 0  Id b: type int [line: 172]
.   .   .   .   .   .   Child: 1  Id x: type char [line: 172]
.   .   .   Sibling: 2  Const true : type bool [line: 172]
.   .   .   Sibling: 3  Op * : type int [line: 172]
.   .   .   .   Child: 0  Id x: type char [line: 172]
.   .   .   .   Child: 1  Id b: type int [line: 172]
.   .   Sibling: 72  Id bb: array of type int [line: 174]
.   .   Sibling: 73  Return [line: 176]
.   .   .   Child: 0  Id aa: array of type char [line: 176]
Number of warnings: 25
Number of errors: 145
