====================================
FILE: testExample.c-
ERROR(19): Function 'fred' is not declared.
ERROR(25): For statement requires that symbol 'one' be an array to loop through.
ERROR(26): Variable 'i' is not declared.
ERROR(27): Variable 'i' is not declared.
ERROR(28): Variable 'i' is not declared.
WARNING(25): The variable hole seems not to be used.
ERROR(LINKER): Procedure main is not declared.
Var zev: array of type char [line: 2]
.   Child: 0  Const "corgis" : array of type char [line: 2]
Sibling: 1  Var x: type int [line: 3]
.   Child: 0  Const 42 : type int [line: 3]
Sibling: 2  Var y: type int [line: 3]
.   Child: 0  Const 666 : type int [line: 3]
Sibling: 3  Var one: type char [line: 4]
.   Child: 0  Const "won" : array of type char [line: 4]
Sibling: 4  Func ant: returns type int [line: 6]
.   Child: 0  Param bat: type int [line: 6]
.   Sibling: 1  Param cat: array of type int [line: 6]
.   Sibling: 2  Param dog: type bool [line: 6]
.   Sibling: 3  Param elk: type bool [line: 6]
.   Sibling: 4  Param fox: type int [line: 6]
.   Sibling: 5  Param gnu: type char [line: 6]
.   Child: 1  Compound [line: 7]
.   .   Child: 0  Var goat: type int [line: 8]
.   .   Sibling: 1  Var hog: array of type int [line: 8]
.   .   Child: 1  Assign = : type char [line: 10]
.   .   .   Child: 0  Id gnu: type char [line: 10]
.   .   .   Child: 1  Const: 'W' : type char [line: 10]
.   .   Sibling: 1  Assign = : type int [line: 11]
.   .   .   Child: 0  Id goat: type int [line: 11]
.   .   .   Child: 1  Assign = : type int [line: 11]
.   .   .   .   Child: 0  Op [ : type int [line: 11]
.   .   .   .   .   Child: 0  Id hog: array of type int [line: 11]
.   .   .   .   .   Child: 1  Const 2 : type int [line: 11]
.   .   .   .   Child: 1  Op * : type int [line: 11]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 11]
.   .   .   .   .   Child: 1  Op * : type int [line: 11]
.   .   .   .   .   .   Child: 0  Id cat: array of type int [line: 11]
.   .   Sibling: 2  If [line: 12]
.   .   .   Child: 0  Op | : type bool [line: 12]
.   .   .   .   Child: 0  Op & : type bool [line: 12]
.   .   .   .   .   Child: 0  Id dog: type bool [line: 12]
.   .   .   .   .   Child: 1  Id elk: type bool [line: 12]
.   .   .   .   Child: 1  Op > : type bool [line: 12]
.   .   .   .   .   Child: 0  Id bat: type int [line: 12]
.   .   .   .   .   Child: 1  Op [ : type int [line: 12]
.   .   .   .   .   .   Child: 0  Id cat: array of type int [line: 12]
.   .   .   .   .   .   Child: 1  Const 3 : type int [line: 12]
.   .   .   Child: 1  Assign = : type bool [line: 12]
.   .   .   .   Child: 0  Id dog: type bool [line: 12]
.   .   .   .   Child: 1  Op ! : type bool [line: 12]
.   .   .   .   .   Child: 0  Id dog: type bool [line: 12]
.   .   .   Child: 2  Assign ++ : type int [line: 13]
.   .   .   .   Child: 0  Id fox: type int [line: 13]
.   .   Sibling: 3  If [line: 14]
.   .   .   Child: 0  Op <= : type bool [line: 14]
.   .   .   .   Child: 0  Id bat: type int [line: 14]
.   .   .   .   Child: 1  Id fox: type int [line: 14]
.   .   .   Child: 1  Compound [line: 14]
.   .   .   .   Child: 1  While [line: 15]
.   .   .   .   .   Child: 0  Id dog: type bool [line: 15]
.   .   .   .   .   Child: 1  Compound [line: 15]
.   .   .   .   .   .   Child: 0  Var hog: static type int [line: 16]
.   .   .   .   .   .   Child: 1  Assign = : type int [line: 18]
.   .   .   .   .   .   .   Child: 0  Id hog: static type int [line: 18]
.   .   .   .   .   .   .   Child: 1  Id fox: type int [line: 18]
.   .   .   .   .   .   Sibling: 1  Assign = : type bool [line: 19]
.   .   .   .   .   .   .   Child: 0  Id dog: type bool [line: 19]
.   .   .   .   .   .   .   Child: 1  Op > : type bool [line: 19]
.   .   .   .   .   .   .   .   Child: 0  Call fred: undefined type [line: 19]
.   .   .   .   .   .   .   .   .   Child: 0  Assign ++ : type int [line: 19]
.   .   .   .   .   .   .   .   .   .   Child: 0  Id fox: type int [line: 19]
.   .   .   .   .   .   .   .   .   Sibling: 1  Id cat: array of type int [line: 19]
.   .   .   .   .   .   .   .   Child: 1  Const 666 : type int [line: 19]
.   .   .   .   .   .   Sibling: 2  If [line: 20]
.   .   .   .   .   .   .   Child: 0  Op > : type bool [line: 20]
.   .   .   .   .   .   .   .   Child: 0  Id hog: static type int [line: 20]
.   .   .   .   .   .   .   .   Child: 1  Id bat: type int [line: 20]
.   .   .   .   .   .   .   Child: 1  Break [line: 20]
.   .   .   .   .   .   .   Child: 2  If [line: 21]
.   .   .   .   .   .   .   .   Child: 0  Op != : type bool [line: 21]
.   .   .   .   .   .   .   .   .   Child: 0  Id fox: type int [line: 21]
.   .   .   .   .   .   .   .   .   Child: 1  Const 0 : type int [line: 21]
.   .   .   .   .   .   .   .   Child: 1  Assign += : type int [line: 21]
.   .   .   .   .   .   .   .   .   Child: 0  Id fox: type int [line: 21]
.   .   .   .   .   .   .   .   .   Child: 1  Const 7 : type int [line: 21]
.   .   Sibling: 4  For [line: 25]
.   .   .   Child: 0  Var hole: type char [line: 25]
.   .   .   Child: 1  Id one: type char [line: 25]
.   .   .   Child: 2  Compound [line: 25]
.   .   .   .   Child: 1  If [line: 26]
.   .   .   .   .   Child: 0  Op == : type bool [line: 26]
.   .   .   .   .   .   Child: 0  Id x: type int [line: 26]
.   .   .   .   .   .   Child: 1  Const 1 : type int [line: 26]
.   .   .   .   .   Child: 1  Assign = : type int [line: 26]
.   .   .   .   .   .   Child: 0  Op [ : type int [line: 26]
.   .   .   .   .   .   .   Child: 0  Id cat: array of type int [line: 26]
.   .   .   .   .   .   .   Child: 1  Id i: undefined type [line: 26]
.   .   .   .   .   .   Child: 1  Id bat: type int [line: 26]
.   .   .   .   .   Child: 2  If [line: 27]
.   .   .   .   .   .   Child: 0  Op == : type bool [line: 27]
.   .   .   .   .   .   .   Child: 0  Id x: type int [line: 27]
.   .   .   .   .   .   .   Child: 1  Const 2 : type int [line: 27]
.   .   .   .   .   .   Child: 1  Assign = : type int [line: 27]
.   .   .   .   .   .   .   Child: 0  Op [ : type int [line: 27]
.   .   .   .   .   .   .   .   Child: 0  Id cat: array of type int [line: 27]
.   .   .   .   .   .   .   .   Child: 1  Id i: undefined type [line: 27]
.   .   .   .   .   .   .   Child: 1  Op % : type int [line: 27]
.   .   .   .   .   .   .   .   Child: 0  Id bat: type int [line: 27]
.   .   .   .   .   .   .   .   Child: 1  Const 17 : type int [line: 27]
.   .   .   .   .   .   Child: 2  If [line: 28]
.   .   .   .   .   .   .   Child: 0  Op == : type bool [line: 28]
.   .   .   .   .   .   .   .   Child: 0  Id x: type int [line: 28]
.   .   .   .   .   .   .   .   Child: 1  Const 3 : type int [line: 28]
.   .   .   .   .   .   .   Child: 1  Assign = : type int [line: 28]
.   .   .   .   .   .   .   .   Child: 0  Op [ : type int [line: 28]
.   .   .   .   .   .   .   .   .   Child: 0  Id cat: array of type int [line: 28]
.   .   .   .   .   .   .   .   .   Child: 1  Id i: undefined type [line: 28]
.   .   .   .   .   .   .   .   Child: 1  Const 78 : type int [line: 28]
.   .   .   .   .   .   .   Child: 2  Assign ++ : type int [line: 29]
.   .   .   .   .   .   .   .   Child: 0  Id x: type int [line: 29]
.   .   Sibling: 5  Return [line: 32]
.   .   .   Child: 0  Op / : type int [line: 32]
.   .   .   .   Child: 0  Op + : type int [line: 32]
.   .   .   .   .   Child: 0  Id fox: type int [line: 32]
.   .   .   .   .   Child: 1  Op * : type int [line: 32]
.   .   .   .   .   .   Child: 0  Id bat: type int [line: 32]
.   .   .   .   .   .   Child: 1  Op [ : type int [line: 32]
.   .   .   .   .   .   .   Child: 0  Id cat: array of type int [line: 32]
.   .   .   .   .   .   .   Child: 1  Id bat: type int [line: 32]
.   .   .   .   Child: 1  Op - : type int [line: 32]
.   .   .   .   .   Child: 0  Id fox: type int [line: 32]
Sibling: 5  Func max: returns type int [line: 36]
.   Child: 0  Param a: type int [line: 36]
.   Sibling: 1  Param b: type int [line: 36]
.   Child: 1  If [line: 36]
.   .   Child: 0  Op > : type bool [line: 36]
.   .   .   Child: 0  Id a: type int [line: 36]
.   .   .   Child: 1  Id b: type int [line: 36]
.   .   Child: 1  Return [line: 36]
.   .   .   Child: 0  Id a: type int [line: 36]
.   .   Child: 2  Return [line: 36]
.   .   .   Child: 0  Id b: type int [line: 36]
Number of warnings: 1
Number of errors: 6
