====================================
FILE: tinyType.c-
WARNING(4): The variable x seems not to be used.
ERROR(5): Symbol 'bender' is already declared at line 4.
ERROR(9): Symbol 'x' is already declared at line 7.
ERROR(10): Symbol 'x' is already declared at line 7.
ERROR(10): Symbol 'y' is already declared at line 9.
ERROR(12): Variable 'z' is not declared.
ERROR(13): '=' requires operands of the same type but lhs is type bool and rhs is type int.
WARNING(15): Variable z may be uninitialized when used here.
ERROR(17): Variable 'z' is not declared.
ERROR(17): Variable 'z' is not declared.
ERROR(18): Cannot use function 'main' as a variable.
ERROR(19): Cannot index nonarray 'x'.
ERROR(20): Array 'y' should be indexed by type int but got type char.
ERROR(21): Array index is the unindexed array 'y'.
ERROR(23): Array 'y' should be indexed by type int but got type bool.
ERROR(24): Cannot use function 'main' as a variable.
ERROR(25): Cannot use function 'main' as a variable.
ERROR(25): Cannot index nonarray 'main'.
ERROR(25): Array 'main' should be indexed by type int but got type char.
ERROR(26): '&' requires operands of type bool but lhs is of type int.
ERROR(26): '&' requires operands of type bool but rhs is of type char.
ERROR(29): The operation '*' only works with arrays.
ERROR(30): Too few parameters passed for function 'main' declared on line 7.
ERROR(30): The operation '*' only works with arrays.
ERROR(31): Unary '?' requires an operand of type int but was given type char.
ERROR(31): Unary '?' requires an operand of type int but was given type bool.
ERROR(31): '+' requires operands of type int but lhs is of type char.
ERROR(31): '+' requires operands of type int but rhs is of type bool.
ERROR(33): Too few parameters passed for function 'main' declared on line 7.
ERROR(33): Function 'fred' is not declared.
ERROR(33): '&' requires operands of type bool but lhs is of type int.
ERROR(34): '+' requires operands of type int but lhs is of type bool.
ERROR(34): '+' requires operands of type int but rhs is of type bool.
ERROR(35): Too few parameters passed for function 'bender' declared on line 4.
ERROR(35): '*' requires operands of type int but rhs is of type void.
ERROR(36): Too few parameters passed for function 'bender' declared on line 4.
ERROR(36): '=' requires operands of the same type but lhs is type int and rhs is type void.
ERROR(37): Too few parameters passed for function 'main' declared on line 7.
ERROR(37): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(38): Too few parameters passed for function 'bender' declared on line 4.
ERROR(38): Too few parameters passed for function 'bender' declared on line 4.
ERROR(39): Too few parameters passed for function 'bender' declared on line 4.
ERROR(39): Too few parameters passed for function 'bender' declared on line 4.
ERROR(40): Too few parameters passed for function 'bender' declared on line 4.
ERROR(40): Too few parameters passed for function 'bender' declared on line 4.
ERROR(40): '-' requires operands of type int but lhs is of type void.
ERROR(40): '-' requires operands of type int but rhs is of type void.
ERROR(41): Expecting type int in parameter 1 of call to 'bender' declared on line 4 but got type void.
ERROR(42): Array 'y' should be indexed by type int but got type void.
ERROR(44): '<' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(48): Function 'main' at line 7 is expecting to return type int but return has no return value.
ERROR(49): Function 'main' at line 7 is expecting to return type int but got type bool.
ERROR(50): Function 'main' at line 7 is expecting to return type int but got type char.
ERROR(51): Too few parameters passed for function 'bender' declared on line 4.
ERROR(51): Function 'main' at line 7 is expecting to return type int but got type void.
Var w: type bool [line: 2]
Sibling: 1  Var x: type bool [line: 2]
Sibling: 2  Var y: type bool [line: 2]
Sibling: 3  Func bender: returns type void [line: 4]
.   Child: 0  Param x: type int [line: 4]
Sibling: 4  Func bender: returns type int [line: 5]
.   Child: 1  Return [line: 5]
.   .   Child: 0  Const 666 : type int [line: 5]
Sibling: 5  Func main: returns type int [line: 7]
.   Child: 0  Param x: type int [line: 7]
.   Child: 1  Compound [line: 8]
.   .   Child: 0  Var x: type int [line: 9]
.   .   Sibling: 1  Var y: array of type int [line: 9]
.   .   Sibling: 2  Var x: type char [line: 10]
.   .   Sibling: 3  Var y: type char [line: 10]
.   .   Child: 1  Op + : type int [line: 12]
.   .   .   Child: 0  Id z: undefined type [line: 12]
.   .   .   Child: 1  Id x: type int [line: 12]
.   .   Sibling: 1  Assign = : type bool [line: 13]
.   .   .   Child: 0  Id w: type bool [line: 13]
.   .   .   Child: 1  Const 72 : type int [line: 13]
.   .   Sibling: 2  Compound [line: 14]
.   .   .   Child: 0  Var z: type int [line: 14]
.   .   .   Child: 1  Assign = : type int [line: 15]
.   .   .   .   Child: 0  Id z: type int [line: 15]
.   .   .   .   Child: 1  Op / : type int [line: 15]
.   .   .   .   .   Child: 0  Id z: type int [line: 15]
.   .   .   .   .   Child: 1  Id z: type int [line: 15]
.   .   Sibling: 3  Op + : type int [line: 17]
.   .   .   Child: 0  Id z: undefined type [line: 17]
.   .   .   Child: 1  Id z: undefined type [line: 17]
.   .   Sibling: 4  Assign = : undefined type [line: 18]
.   .   .   Child: 0  Id main: undefined type [line: 18]
.   .   .   Child: 1  Const 10 : type int [line: 18]
.   .   Sibling: 5  Assign = : type int [line: 19]
.   .   .   Child: 0  Op [ : type int [line: 19]
.   .   .   .   Child: 0  Id x: type int [line: 19]
.   .   .   .   Child: 1  Const 2 : type int [line: 19]
.   .   .   Child: 1  Const 3 : type int [line: 19]
.   .   Sibling: 6  Assign = : type int [line: 20]
.   .   .   Child: 0  Op [ : type int [line: 20]
.   .   .   .   Child: 0  Id y: array of type int [line: 20]
.   .   .   .   Child: 1  Const: 'c' : type char [line: 20]
.   .   .   Child: 1  Const 4 : type int [line: 20]
.   .   Sibling: 7  Assign = : type int [line: 21]
.   .   .   Child: 0  Op [ : type int [line: 21]
.   .   .   .   Child: 0  Id y: array of type int [line: 21]
.   .   .   .   Child: 1  Id y: array of type int [line: 21]
.   .   .   Child: 1  Const 5 : type int [line: 21]
.   .   Sibling: 8  Assign = : type int [line: 22]
.   .   .   Child: 0  Op [ : type int [line: 22]
.   .   .   .   Child: 0  Id y: array of type int [line: 22]
.   .   .   .   Child: 1  Op [ : type int [line: 22]
.   .   .   .   .   Child: 0  Id y: array of type int [line: 22]
.   .   .   .   .   Child: 1  Const 0 : type int [line: 22]
.   .   .   Child: 1  Const 55 : type int [line: 22]
.   .   Sibling: 9  Op [ : type int [line: 23]
.   .   .   Child: 0  Id y: array of type int [line: 23]
.   .   .   Child: 1  Const true : type bool [line: 23]
.   .   Sibling: 10  Op [ : type int [line: 24]
.   .   .   Child: 0  Id y: array of type int [line: 24]
.   .   .   Child: 1  Id main: undefined type [line: 24]
.   .   Sibling: 11  Op [ : undefined type [line: 25]
.   .   .   Child: 0  Id main: undefined type [line: 25]
.   .   .   Child: 1  Const: 'c' : type char [line: 25]
.   .   Sibling: 12  Op & : type bool [line: 26]
.   .   .   Child: 0  Const 6 : type int [line: 26]
.   .   .   Child: 1  Const: 'x' : type char [line: 26]
.   .   Sibling: 13  Assign = : array of type int [line: 27]
.   .   .   Child: 0  Id y: array of type int [line: 27]
.   .   .   Child: 1  Id y: array of type int [line: 27]
.   .   Sibling: 14  Op [ : type int [line: 28]
.   .   .   Child: 0  Id y: array of type int [line: 28]
.   .   .   Child: 1  Op - : type int [line: 28]
.   .   .   .   Child: 0  Op * : type int [line: 28]
.   .   .   .   .   Child: 0  Id y: array of type int [line: 28]
.   .   .   .   Child: 1  Const 1 : type int [line: 28]
.   .   Sibling: 15  Op * : type int [line: 29]
.   .   .   Child: 0  Id x: type int [line: 29]
.   .   Sibling: 16  Op * : type int [line: 30]
.   .   .   Child: 0  Call main: type int [line: 30]
.   .   Sibling: 17  Op + : type int [line: 31]
.   .   .   Child: 0  Op ? : type char [line: 31]
.   .   .   .   Child: 0  Const: 'u' : type char [line: 31]
.   .   .   Child: 1  Op ? : type bool [line: 31]
.   .   .   .   Child: 0  Const true : type bool [line: 31]
.   .   Sibling: 18  Op | : type bool [line: 32]
.   .   .   Child: 0  Op > : type bool [line: 32]
.   .   .   .   Child: 0  Op + : type int [line: 32]
.   .   .   .   .   Child: 0  Const 66 : type int [line: 32]
.   .   .   .   .   Child: 1  Op * : type int [line: 32]
.   .   .   .   .   .   Child: 0  Op [ : type int [line: 32]
.   .   .   .   .   .   .   Child: 0  Id y: array of type int [line: 32]
.   .   .   .   .   .   .   Child: 1  Op - : type int [line: 32]
.   .   .   .   .   .   .   .   Child: 0  Const 77 : type int [line: 32]
.   .   .   .   .   .   .   .   Child: 1  Op * : type int [line: 32]
.   .   .   .   .   .   .   .   .   Child: 0  Const 11 : type int [line: 32]
.   .   .   .   .   .   .   .   .   Child: 1  Const 55 : type int [line: 32]
.   .   .   .   .   .   Child: 1  Const 77 : type int [line: 32]
.   .   .   .   Child: 1  Const 12 : type int [line: 32]
.   .   .   Child: 1  Const false : type bool [line: 32]
.   .   Sibling: 19  Op & : type bool [line: 33]
.   .   .   Child: 0  Call main: type int [line: 33]
.   .   .   Child: 1  Call fred: undefined type [line: 33]
.   .   Sibling: 20  Op + : type int [line: 34]
.   .   .   Child: 0  Op + : type int [line: 34]
.   .   .   .   Child: 0  Const true : type bool [line: 34]
.   .   .   .   Child: 1  Const false : type bool [line: 34]
.   .   .   Child: 1  Const 666 : type int [line: 34]
.   .   Sibling: 21  Op * : type int [line: 35]
.   .   .   Child: 0  Const 919 : type int [line: 35]
.   .   .   Child: 1  Call bender: type void [line: 35]
.   .   Sibling: 22  Assign = : type int [line: 36]
.   .   .   Child: 0  Id x: type int [line: 36]
.   .   .   Child: 1  Call bender: type void [line: 36]
.   .   Sibling: 23  Assign = : type bool [line: 37]
.   .   .   Child: 0  Id w: type bool [line: 37]
.   .   .   Child: 1  Call main: type int [line: 37]
.   .   Sibling: 24  Op == : type bool [line: 38]
.   .   .   Child: 0  Call bender: type void [line: 38]
.   .   .   Child: 1  Call bender: type void [line: 38]
.   .   Sibling: 25  Op != : type bool [line: 39]
.   .   .   Child: 0  Call bender: type void [line: 39]
.   .   .   Child: 1  Call bender: type void [line: 39]
.   .   Sibling: 26  Op - : type int [line: 40]
.   .   .   Child: 0  Call bender: type void [line: 40]
.   .   .   Child: 1  Call bender: type void [line: 40]
.   .   Sibling: 27  Call bender: type void [line: 41]
.   .   .   Child: 0  Call bender: type void [line: 41]
.   .   .   .   Child: 0  Const 4 : type int [line: 41]
.   .   Sibling: 28  Op [ : type int [line: 42]
.   .   .   Child: 0  Id y: array of type int [line: 42]
.   .   .   Child: 1  Call bender: type void [line: 42]
.   .   .   .   Child: 0  Const 3 : type int [line: 42]
.   .   Sibling: 29  Op < : type bool [line: 43]
.   .   .   Child: 0  Const true : type bool [line: 43]
.   .   .   Child: 1  Const false : type bool [line: 43]
.   .   Sibling: 30  Op < : type bool [line: 44]
.   .   .   Child: 0  Const: 'a' : type char [line: 44]
.   .   .   Child: 1  Const 11 : type int [line: 44]
.   .   Sibling: 31  Op >= : type bool [line: 45]
.   .   .   Child: 0  Const: 'a' : type char [line: 45]
.   .   .   Child: 1  Const: 'b' : type char [line: 45]
.   .   Sibling: 32  Op + : type int [line: 46]
.   .   .   Child: 0  Const 6 : type int [line: 46]
.   .   .   Child: 1  Assign = : type int [line: 46]
.   .   .   .   Child: 0  Id x: type int [line: 46]
.   .   .   .   Child: 1  Const 3 : type int [line: 46]
.   .   Sibling: 33  Return [line: 48]
.   .   Sibling: 34  Return [line: 49]
.   .   .   Child: 0  Const true : type bool [line: 49]
.   .   Sibling: 35  Return [line: 50]
.   .   .   Child: 0  Const: 'x' : type char [line: 50]
.   .   Sibling: 36  Return [line: 51]
.   .   .   Child: 0  Call bender: type void [line: 51]
Number of warnings: 2
Number of errors: 53
