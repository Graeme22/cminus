====================================
FILE: call.c-
ERROR(4): Function 'output' is not declared.
ERROR(5): Function 'outnl' is not declared.
WARNING(2): Expecting to return type int but function 'showInt' has no return statement.
ERROR(13): Function 'output' is not declared.
ERROR(16): Function 'outnl' is not declared.
WARNING(8): Expecting to return type int but function 'showIntArray' has no return statement.
ERROR(21): Function 'outputb' is not declared.
ERROR(22): Function 'outnl' is not declared.
WARNING(19): Expecting to return type int but function 'showBool' has no return statement.
ERROR(61): Function 'output' is not declared.
ERROR(62): Function 'outnl' is not declared.
ERROR(65): Function 'output' is not declared.
ERROR(66): Function 'outnl' is not declared.
ERROR(69): Function 'output' is not declared.
ERROR(70): Function 'outnl' is not declared.
ERROR(73): Function 'output' is not declared.
ERROR(74): Function 'outnl' is not declared.
ERROR(106): Function 'output' is not declared.
ERROR(107): Function 'output' is not declared.
ERROR(111): Function 'output' is not declared.
ERROR(112): Function 'outnl' is not declared.
ERROR(115): Function 'output' is not declared.
ERROR(116): Function 'outnl' is not declared.
ERROR(117): Function 'output' is not declared.
ERROR(118): Function 'outnl' is not declared.
Func showInt: returns type int [line: 2]
.   Child: 0  Param x: type int [line: 2]
.   Child: 1  Compound [line: 3]
.   .   Child: 1  Call output: undefined type [line: 4]
.   .   .   Child: 0  Id x: type int [line: 4]
.   .   Sibling: 1  Call outnl: undefined type [line: 5]
Sibling: 1  Func showIntArray: returns type int [line: 8]
.   Child: 0  Param x: array of type int [line: 8]
.   Sibling: 1  Param size: type int [line: 8]
.   Child: 1  Compound [line: 9]
.   .   Child: 0  Var i: type int [line: 10]
.   .   Child: 1  Assign = : type int [line: 11]
.   .   .   Child: 0  Id i: type int [line: 11]
.   .   .   Child: 1  Const 0 : type int [line: 11]
.   .   Sibling: 1  While [line: 12]
.   .   .   Child: 0  Op < : type bool [line: 12]
.   .   .   .   Child: 0  Id i: type int [line: 12]
.   .   .   .   Child: 1  Id size: type int [line: 12]
.   .   .   Child: 1  Compound [line: 12]
.   .   .   .   Child: 1  Call output: undefined type [line: 13]
.   .   .   .   .   Child: 0  Op [ : type int [line: 13]
.   .   .   .   .   .   Child: 0  Id x: array of type int [line: 13]
.   .   .   .   .   .   Child: 1  Id i: type int [line: 13]
.   .   .   .   Sibling: 1  Assign = : type int [line: 14]
.   .   .   .   .   Child: 0  Id i: type int [line: 14]
.   .   .   .   .   Child: 1  Op + : type int [line: 14]
.   .   .   .   .   .   Child: 0  Id i: type int [line: 14]
.   .   .   .   .   .   Child: 1  Const 1 : type int [line: 14]
.   .   Sibling: 2  Call outnl: undefined type [line: 16]
Sibling: 2  Func showBool: returns type int [line: 19]
.   Child: 0  Param x: type bool [line: 19]
.   Child: 1  Compound [line: 20]
.   .   Child: 1  Call outputb: undefined type [line: 21]
.   .   .   Child: 0  Id x: type bool [line: 21]
.   .   Sibling: 1  Call outnl: undefined type [line: 22]
Sibling: 3  Func truth: returns type bool [line: 25]
.   Child: 1  Compound [line: 26]
.   .   Child: 1  Return [line: 27]
.   .   .   Child: 0  Const true : type bool [line: 27]
Sibling: 4  Func magic: returns type int [line: 30]
.   Child: 1  Compound [line: 31]
.   .   Child: 1  Return [line: 32]
.   .   .   Child: 0  Const 666 : type int [line: 32]
Sibling: 5  Func sqr: returns type int [line: 35]
.   Child: 0  Param x: type int [line: 35]
.   Child: 1  Compound [line: 36]
.   .   Child: 1  Return [line: 37]
.   .   .   Child: 0  Op * : type int [line: 37]
.   .   .   .   Child: 0  Id x: type int [line: 37]
.   .   .   .   Child: 1  Id x: type int [line: 37]
Sibling: 6  Func add: returns type int [line: 40]
.   Child: 0  Param x: type int [line: 40]
.   Sibling: 1  Param y: type int [line: 40]
.   Child: 1  Compound [line: 41]
.   .   Child: 1  Return [line: 42]
.   .   .   Child: 0  Op + : type int [line: 42]
.   .   .   .   Child: 0  Id x: type int [line: 42]
.   .   .   .   Child: 1  Id y: type int [line: 42]
Sibling: 7  Func mul: returns type int [line: 45]
.   Child: 0  Param x: type int [line: 45]
.   Sibling: 1  Param y: type int [line: 45]
.   Child: 1  Compound [line: 46]
.   .   Child: 1  Return [line: 47]
.   .   .   Child: 0  Op * : type int [line: 47]
.   .   .   .   Child: 0  Id x: type int [line: 47]
.   .   .   .   Child: 1  Id y: type int [line: 47]
Sibling: 8  Var g: type int [line: 50]
Sibling: 9  Func caller: returns type void [line: 52]
.   Child: 0  Param x: type int [line: 52]
.   Sibling: 1  Param y: array of type int [line: 52]
.   Child: 1  Compound [line: 53]
.   .   Child: 0  Var z: type int [line: 54]
.   .   Sibling: 1  Var a: type int [line: 55]
.   .   Child: 1  Assign = : type int [line: 57]
.   .   .   Child: 0  Id a: type int [line: 57]
.   .   .   Child: 1  Const 666 : type int [line: 57]
.   .   Sibling: 1  Assign = : type int [line: 58]
.   .   .   Child: 0  Id g: type int [line: 58]
.   .   .   Child: 1  Const 777 : type int [line: 58]
.   .   Sibling: 2  Assign = : type int [line: 60]
.   .   .   Child: 0  Id z: type int [line: 60]
.   .   .   Child: 1  Call sqr: type int [line: 60]
.   .   .   .   Child: 0  Id x: type int [line: 60]
.   .   Sibling: 3  Call output: undefined type [line: 61]
.   .   .   Child: 0  Id z: type int [line: 61]
.   .   Sibling: 4  Call outnl: undefined type [line: 62]
.   .   Sibling: 5  Assign = : type int [line: 64]
.   .   .   Child: 0  Id z: type int [line: 64]
.   .   .   Child: 1  Call sqr: type int [line: 64]
.   .   .   .   Child: 0  Op [ : type int [line: 64]
.   .   .   .   .   Child: 0  Id y: array of type int [line: 64]
.   .   .   .   .   Child: 1  Const 7 : type int [line: 64]
.   .   Sibling: 6  Call output: undefined type [line: 65]
.   .   .   Child: 0  Id z: type int [line: 65]
.   .   Sibling: 7  Call outnl: undefined type [line: 66]
.   .   Sibling: 8  Assign = : type int [line: 68]
.   .   .   Child: 0  Id z: type int [line: 68]
.   .   .   Child: 1  Call sqr: type int [line: 68]
.   .   .   .   Child: 0  Id a: type int [line: 68]
.   .   Sibling: 9  Call output: undefined type [line: 69]
.   .   .   Child: 0  Id z: type int [line: 69]
.   .   Sibling: 10  Call outnl: undefined type [line: 70]
.   .   Sibling: 11  Assign = : type int [line: 72]
.   .   .   Child: 0  Id z: type int [line: 72]
.   .   .   Child: 1  Call sqr: type int [line: 72]
.   .   .   .   Child: 0  Id g: type int [line: 72]
.   .   Sibling: 12  Call output: undefined type [line: 73]
.   .   .   Child: 0  Id z: type int [line: 73]
.   .   Sibling: 13  Call outnl: undefined type [line: 74]
Sibling: 10  Func swap: returns type void [line: 77]
.   Child: 0  Param x: array of type int [line: 77]
.   Sibling: 1  Param z1: type int [line: 77]
.   Sibling: 2  Param z2: type int [line: 77]
.   Child: 1  Compound [line: 78]
.   .   Child: 0  Var tmp: type int [line: 79]
.   .   Child: 1  Assign = : type int [line: 80]
.   .   .   Child: 0  Id tmp: type int [line: 80]
.   .   .   Child: 1  Op [ : type int [line: 80]
.   .   .   .   Child: 0  Id x: array of type int [line: 80]
.   .   .   .   Child: 1  Id z1: type int [line: 80]
.   .   Sibling: 1  Assign = : type int [line: 81]
.   .   .   Child: 0  Op [ : type int [line: 81]
.   .   .   .   Child: 0  Id x: array of type int [line: 81]
.   .   .   .   Child: 1  Id z1: type int [line: 81]
.   .   .   Child: 1  Op [ : type int [line: 81]
.   .   .   .   Child: 0  Id x: array of type int [line: 81]
.   .   .   .   Child: 1  Id z2: type int [line: 81]
.   .   Sibling: 2  Assign = : type int [line: 82]
.   .   .   Child: 0  Op [ : type int [line: 82]
.   .   .   .   Child: 0  Id x: array of type int [line: 82]
.   .   .   .   Child: 1  Id z2: type int [line: 82]
.   .   .   Child: 1  Id tmp: type int [line: 82]
Sibling: 11  Func main: returns type void [line: 85]
.   Child: 1  Compound [line: 86]
.   .   Child: 0  Var p: type int [line: 87]
.   .   Sibling: 1  Var q: type int [line: 87]
.   .   Sibling: 2  Var r: array of type int [line: 87]
.   .   Sibling: 3  Var s: array of type int [line: 87]
.   .   Child: 1  Assign = : type int [line: 89]
.   .   .   Child: 0  Id p: type int [line: 89]
.   .   .   Child: 1  Const 0 : type int [line: 89]
.   .   Sibling: 1  While [line: 90]
.   .   .   Child: 0  Op < : type bool [line: 90]
.   .   .   .   Child: 0  Id p: type int [line: 90]
.   .   .   .   Child: 1  Const 10 : type int [line: 90]
.   .   .   Child: 1  Compound [line: 90]
.   .   .   .   Child: 1  Assign = : type int [line: 91]
.   .   .   .   .   Child: 0  Op [ : type int [line: 91]
.   .   .   .   .   .   Child: 0  Id r: array of type int [line: 91]
.   .   .   .   .   .   Child: 1  Id p: type int [line: 91]
.   .   .   .   .   Child: 1  Id p: type int [line: 91]
.   .   .   .   Sibling: 1  Assign ++ : type int [line: 92]
.   .   .   .   .   Child: 0  Id p: type int [line: 92]
.   .   Sibling: 2  Assign = : type int [line: 95]
.   .   .   Child: 0  Id p: type int [line: 95]
.   .   .   Child: 1  Const 111 : type int [line: 95]
.   .   Sibling: 3  Assign = : type int [line: 96]
.   .   .   Child: 0  Id q: type int [line: 96]
.   .   .   Child: 1  Const 222 : type int [line: 96]
.   .   Sibling: 4  Assign = : type int [line: 97]
.   .   .   Child: 0  Op [ : type int [line: 97]
.   .   .   .   Child: 0  Id r: array of type int [line: 97]
.   .   .   .   Child: 1  Const 7 : type int [line: 97]
.   .   .   Child: 1  Const 333 : type int [line: 97]
.   .   Sibling: 5  Assign = : type int [line: 98]
.   .   .   Child: 0  Op [ : type int [line: 98]
.   .   .   .   Child: 0  Id s: array of type int [line: 98]
.   .   .   .   Child: 1  Const 7 : type int [line: 98]
.   .   .   Child: 1  Const 444 : type int [line: 98]
.   .   Sibling: 6  Call showInt: type int [line: 100]
.   .   .   Child: 0  Id p: type int [line: 100]
.   .   Sibling: 7  Call showIntArray: type int [line: 102]
.   .   .   Child: 0  Id r: array of type int [line: 102]
.   .   .   Sibling: 1  Const 10 : type int [line: 102]
.   .   Sibling: 8  Call showBool: type int [line: 104]
.   .   .   Child: 0  Call truth: type bool [line: 104]
.   .   Sibling: 9  Call output: undefined type [line: 106]
.   .   .   Child: 0  Call showInt: type int [line: 106]
.   .   .   .   Child: 0  Id p: type int [line: 106]
.   .   Sibling: 10  Call output: undefined type [line: 107]
.   .   .   Child: 0  Call showBool: type int [line: 107]
.   .   .   .   Child: 0  Call truth: type bool [line: 107]
.   .   Sibling: 11  Call caller: type void [line: 109]
.   .   .   Child: 0  Id p: type int [line: 109]
.   .   .   Sibling: 1  Id r: array of type int [line: 109]
.   .   Sibling: 12  Call output: undefined type [line: 111]
.   .   .   Child: 0  Call add: type int [line: 111]
.   .   .   .   Child: 0  Call add: type int [line: 111]
.   .   .   .   .   Child: 0  Id p: type int [line: 111]
.   .   .   .   .   Sibling: 1  Id q: type int [line: 111]
.   .   .   .   Sibling: 1  Call mul: type int [line: 111]
.   .   .   .   .   Child: 0  Id p: type int [line: 111]
.   .   .   .   .   Sibling: 1  Id q: type int [line: 111]
.   .   Sibling: 13  Call outnl: undefined type [line: 112]
.   .   Sibling: 14  Assign = : type int [line: 113]
.   .   .   Child: 0  Op [ : type int [line: 113]
.   .   .   .   Child: 0  Id r: array of type int [line: 113]
.   .   .   .   Child: 1  Const 9 : type int [line: 113]
.   .   .   Child: 1  Const 555 : type int [line: 113]
.   .   Sibling: 15  Call swap: type void [line: 114]
.   .   .   Child: 0  Id r: array of type int [line: 114]
.   .   .   Sibling: 1  Const 7 : type int [line: 114]
.   .   .   Sibling: 2  Const 9 : type int [line: 114]
.   .   Sibling: 16  Call output: undefined type [line: 115]
.   .   .   Child: 0  Op [ : type int [line: 115]
.   .   .   .   Child: 0  Id r: array of type int [line: 115]
.   .   .   .   Child: 1  Const 9 : type int [line: 115]
.   .   Sibling: 17  Call outnl: undefined type [line: 116]
.   .   Sibling: 18  Call output: undefined type [line: 117]
.   .   .   Child: 0  Op * : type int [line: 117]
.   .   .   .   Child: 0  Const 2 : type int [line: 117]
.   .   .   .   Child: 1  Call add: type int [line: 117]
.   .   .   .   .   Child: 0  Op * : type int [line: 117]
.   .   .   .   .   .   Child: 0  Call add: type int [line: 117]
.   .   .   .   .   .   .   Child: 0  Op * : type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 3 : type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 4 : type int [line: 117]
.   .   .   .   .   .   .   Sibling: 1  Op * : type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 5 : type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 6 : type int [line: 117]
.   .   .   .   .   .   Child: 1  Const 7 : type int [line: 117]
.   .   .   .   .   Sibling: 1  Op * : type int [line: 117]
.   .   .   .   .   .   Child: 0  Call add: type int [line: 117]
.   .   .   .   .   .   .   Child: 0  Op * : type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 9 : type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 10 : type int [line: 117]
.   .   .   .   .   .   .   Sibling: 1  Op * : type int [line: 117]
.   .   .   .   .   .   .   .   Child: 0  Const 11 : type int [line: 117]
.   .   .   .   .   .   .   .   Child: 1  Const 12 : type int [line: 117]
.   .   .   .   .   .   Child: 1  Const 13 : type int [line: 117]
.   .   Sibling: 19  Call outnl: undefined type [line: 118]
Number of warnings: 3
Number of errors: 22
