====================================
FILE: everythingF20.c-
WARNING(42): Variable trousers may be uninitialized when used here.
ERROR(58): '=' requires both operands be arrays or not but lhs is an array and rhs is not an array.
WARNING(67): Variable c may be uninitialized when used here.
WARNING(67): The variable z seems not to be used.
WARNING(68): The variable i seems not to be used.
WARNING(64): The variable i seems not to be used.
WARNING(54): The variable c seems not to be used.
WARNING(50): The variable cheese seems not to be used.
WARNING(55): The variable i seems not to be used.
WARNING(50): The variable launch seems not to be used.
WARNING(50): The variable moon seems not to be used.
WARNING(72): The variable preston seems not to be used.
WARNING(72): The variable shaun seems not to be used.
WARNING(74): The variable void seems not to be used.
WARNING(85): Variable chicken may be uninitialized when used here.
WARNING(85): Variable run may be uninitialized when used here.
WARNING(88): Variable wallace may be uninitialized when used here.
WARNING(88): Variable gromit may be uninitialized when used here.
WARNING(93): The variable y seems not to be used.
WARNING(112): Variable preston may be uninitialized when used here.
WARNING(112): Variable yarn may be uninitialized when used here.
WARNING(112): Variable shaun may be uninitialized when used here.
WARNING(108): The variable wool seems not to be used.
Var gromit: type int [line: 6]
Sibling: 1  Func wallace: returns type void [line: 8]
.   Child: 0  Param wrong: type int [line: 8]
.   Sibling: 1  Param trousers: type int [line: 8]
.   Child: 1  Compound [line: 9]
.   .   Child: 0  Var close: type bool [line: 10]
.   .   .   Child: 0  Const true : type bool [line: 10]
.   .   Sibling: 1  Var shave: type bool [line: 10]
.   .   .   Child: 0  Const false : type bool [line: 10]
.   .   Child: 1  Const 1729 : type int [line: 12]
.   .   Sibling: 1  Id close: type bool [line: 13]
.   .   Sibling: 2  Op + : type int [line: 14]
.   .   .   Child: 0  Op * : type int [line: 14]
.   .   .   .   Child: 0  Const 11 : type int [line: 14]
.   .   .   .   Child: 1  Const 22 : type int [line: 14]
.   .   .   Child: 1  Op * : type int [line: 14]
.   .   .   .   Child: 0  Const 33 : type int [line: 14]
.   .   .   .   Child: 1  Const 44 : type int [line: 14]
.   .   Sibling: 3  Assign = : type bool [line: 15]
.   .   .   Child: 0  Id close: type bool [line: 15]
.   .   .   Child: 1  Id shave: type bool [line: 15]
.   .   Sibling: 4  Assign = : type int [line: 16]
.   .   .   Child: 0  Id wrong: type int [line: 16]
.   .   .   Child: 1  Op % : type int [line: 16]
.   .   .   .   Child: 0  Id trousers: type int [line: 16]
.   .   .   .   Child: 1  Op / : type int [line: 16]
.   .   .   .   .   Child: 0  Const 666 : type int [line: 16]
.   .   .   .   .   Child: 1  Id wrong: type int [line: 16]
.   .   Sibling: 5  Assign = : type int [line: 17]
.   .   .   Child: 0  Id gromit: type int [line: 17]
.   .   .   Child: 1  Op + : type int [line: 17]
.   .   .   .   Child: 0  Op - : type int [line: 17]
.   .   .   .   .   Child: 0  Op * : type int [line: 17]
.   .   .   .   .   .   Child: 0  Id wrong: type int [line: 17]
.   .   .   .   .   .   Child: 1  Id trousers: type int [line: 17]
.   .   .   .   .   Child: 1  Id gromit: type int [line: 17]
.   .   .   .   Child: 1  Op - : type int [line: 17]
.   .   .   .   .   Child: 0  Const 42 : type int [line: 17]
.   .   Sibling: 6  Assign += : type int [line: 18]
.   .   .   Child: 0  Id gromit: type int [line: 18]
.   .   .   Child: 1  Const 27182818 : type int [line: 18]
.   .   Sibling: 7  Assign -= : type int [line: 19]
.   .   .   Child: 0  Id gromit: type int [line: 19]
.   .   .   Child: 1  Op - : type int [line: 19]
.   .   .   .   Child: 0  Const 31415927 : type int [line: 19]
.   .   Sibling: 8  Assign /= : type int [line: 20]
.   .   .   Child: 0  Id gromit: type int [line: 20]
.   .   .   Child: 1  Assign *= : type int [line: 20]
.   .   .   .   Child: 0  Id wrong: type int [line: 20]
.   .   .   .   Child: 1  Const 42 : type int [line: 20]
.   .   Sibling: 9  Assign = : type bool [line: 21]
.   .   .   Child: 0  Id close: type bool [line: 21]
.   .   .   Child: 1  Op & : type bool [line: 21]
.   .   .   .   Child: 0  Op < : type bool [line: 21]
.   .   .   .   .   Child: 0  Id wrong: type int [line: 21]
.   .   .   .   .   Child: 1  Id trousers: type int [line: 21]
.   .   .   .   Child: 1  Op <= : type bool [line: 21]
.   .   .   .   .   Child: 0  Id trousers: type int [line: 21]
.   .   .   .   .   Child: 1  Id gromit: type int [line: 21]
.   .   Sibling: 10  Assign = : type bool [line: 22]
.   .   .   Child: 0  Id shave: type bool [line: 22]
.   .   .   Child: 1  Op & : type bool [line: 22]
.   .   .   .   Child: 0  Op > : type bool [line: 22]
.   .   .   .   .   Child: 0  Id wrong: type int [line: 22]
.   .   .   .   .   Child: 1  Id trousers: type int [line: 22]
.   .   .   .   Child: 1  Op >= : type bool [line: 22]
.   .   .   .   .   Child: 0  Id trousers: type int [line: 22]
.   .   .   .   .   Child: 1  Id gromit: type int [line: 22]
.   .   Sibling: 11  Compound [line: 23]
.   .   .   Child: 0  Var a: type int [line: 24]
.   .   .   Sibling: 1  Var grand: type int [line: 24]
.   .   .   .   Child: 0  Op / : type int [line: 24]
.   .   .   .   .   Child: 0  Const 1 : type int [line: 24]
.   .   .   .   .   Child: 1  Const 2 : type int [line: 24]
.   .   .   Sibling: 2  Var day: type int [line: 24]
.   .   .   .   Child: 0  Op * : type int [line: 24]
.   .   .   .   .   Child: 0  Const 3 : type int [line: 24]
.   .   .   .   .   Child: 1  Const 4 : type int [line: 24]
.   .   .   Sibling: 3  Var out: type int [line: 24]
.   .   .   .   Child: 0  Op - : type int [line: 24]
.   .   .   .   .   Child: 0  Const 9 : type int [line: 24]
.   .   .   Child: 1  Assign = : type int [line: 25]
.   .   .   .   Child: 0  Id a: type int [line: 25]
.   .   .   .   Child: 1  Assign += : type int [line: 25]
.   .   .   .   .   Child: 0  Id grand: type int [line: 25]
.   .   .   .   .   Child: 1  Assign -= : type int [line: 25]
.   .   .   .   .   .   Child: 0  Id day: type int [line: 25]
.   .   .   .   .   .   Child: 1  Id out: type int [line: 25]
.   .   Sibling: 12  Assign = : type bool [line: 27]
.   .   .   Child: 0  Id close: type bool [line: 27]
.   .   .   Child: 1  Op & : type bool [line: 27]
.   .   .   .   Child: 0  Op < : type bool [line: 27]
.   .   .   .   .   Child: 0  Op + : type int [line: 27]
.   .   .   .   .   .   Child: 0  Op * : type int [line: 27]
.   .   .   .   .   .   .   Child: 0  Op - : type int [line: 27]
.   .   .   .   .   .   .   .   Child: 0  Const 1 : type int [line: 27]
.   .   .   .   .   .   .   Child: 1  Const 2 : type int [line: 27]
.   .   .   .   .   .   Child: 1  Const 3 : type int [line: 27]
.   .   .   .   .   Child: 1  Op * : type int [line: 27]
.   .   .   .   .   .   Child: 0  Const 4 : type int [line: 27]
.   .   .   .   .   .   Child: 1  Const 5 : type int [line: 27]
.   .   .   .   Child: 1  Op > : type bool [line: 27]
.   .   .   .   .   Child: 0  Op + : type int [line: 27]
.   .   .   .   .   .   Child: 0  Const 6 : type int [line: 27]
.   .   .   .   .   .   Child: 1  Const 7 : type int [line: 27]
.   .   .   .   .   Child: 1  Op - : type int [line: 27]
.   .   .   .   .   .   Child: 0  Const 3 : type int [line: 27]
.   .   Sibling: 13  Assign = : type bool [line: 28]
.   .   .   Child: 0  Id shave: type bool [line: 28]
.   .   .   Child: 1  Op | : type bool [line: 28]
.   .   .   .   Child: 0  Const true : type bool [line: 28]
.   .   .   .   Child: 1  Op & : type bool [line: 28]
.   .   .   .   .   Child: 0  Op < : type bool [line: 28]
.   .   .   .   .   .   Child: 0  Op - : type int [line: 28]
.   .   .   .   .   .   .   Child: 0  Op * : type int [line: 28]
.   .   .   .   .   .   .   .   Child: 0  Const 1 : type int [line: 28]
.   .   .   .   .   .   .   .   Child: 1  Op + : type int [line: 28]
.   .   .   .   .   .   .   .   .   Child: 0  Const 2 : type int [line: 28]
.   .   .   .   .   .   .   .   .   Child: 1  Const 3 : type int [line: 28]
.   .   .   .   .   .   Child: 1  Op * : type int [line: 28]
.   .   .   .   .   .   .   Child: 0  Const 4 : type int [line: 28]
.   .   .   .   .   .   .   Child: 1  Const 5 : type int [line: 28]
.   .   .   .   .   Child: 1  Op > : type bool [line: 28]
.   .   .   .   .   .   Child: 0  Op + : type int [line: 28]
.   .   .   .   .   .   .   Child: 0  Const 6 : type int [line: 28]
.   .   .   .   .   .   .   Child: 1  Const 7 : type int [line: 28]
.   .   .   .   .   .   Child: 1  Op - : type int [line: 28]
.   .   .   .   .   .   .   Child: 0  Const 3 : type int [line: 28]
.   .   Sibling: 14  If [line: 29]
.   .   .   Child: 0  Op != : type bool [line: 29]
.   .   .   .   Child: 0  Id shave: type bool [line: 29]
.   .   .   .   Child: 1  Id close: type bool [line: 29]
.   .   .   Child: 1  Assign = : type bool [line: 29]
.   .   .   .   Child: 0  Id shave: type bool [line: 29]
.   .   .   .   Child: 1  Op ! : type bool [line: 29]
.   .   .   .   .   Child: 0  Id close: type bool [line: 29]
.   .   Sibling: 15  If [line: 30]
.   .   .   Child: 0  Op | : type bool [line: 30]
.   .   .   .   Child: 0  Op ! : type bool [line: 30]
.   .   .   .   .   Child: 0  Op == : type bool [line: 30]
.   .   .   .   .   .   Child: 0  Id shave: type bool [line: 30]
.   .   .   .   .   .   Child: 1  Id close: type bool [line: 30]
.   .   .   .   Child: 1  Op ! : type bool [line: 30]
.   .   .   .   .   Child: 0  Id close: type bool [line: 30]
.   .   .   Child: 1  Assign = : type bool [line: 30]
.   .   .   .   Child: 0  Id shave: type bool [line: 30]
.   .   .   .   Child: 1  Const true : type bool [line: 30]
.   .   .   Child: 2  Assign = : type bool [line: 31]
.   .   .   .   Child: 0  Id close: type bool [line: 31]
.   .   .   .   Child: 1  Const false : type bool [line: 31]
.   .   Sibling: 16  While [line: 32]
.   .   .   Child: 0  Id shave: type bool [line: 32]
.   .   .   Child: 1  Compound [line: 32]
.   .   .   .   Child: 0  Var were: static type int [line: 33]
.   .   .   .   Sibling: 1  Var rabbit: static type int [line: 33]
.   .   .   .   Sibling: 2  Var sheep: static array of type int [line: 34]
.   .   .   .   Child: 1  Assign = : type int [line: 36]
.   .   .   .   .   Child: 0  Op [ : type int [line: 36]
.   .   .   .   .   .   Child: 0  Id sheep: static array of type int [line: 36]
.   .   .   .   .   .   Child: 1  Const 2 : type int [line: 36]
.   .   .   .   .   Child: 1  Const 1618 : type int [line: 36]
.   .   .   .   Sibling: 1  If [line: 37]
.   .   .   .   .   Child: 0  Op < : type bool [line: 37]
.   .   .   .   .   .   Child: 0  Op [ : type int [line: 37]
.   .   .   .   .   .   .   Child: 0  Id sheep: static array of type int [line: 37]
.   .   .   .   .   .   .   Child: 1  Const 2 : type int [line: 37]
.   .   .   .   .   .   Child: 1  Const 496 : type int [line: 37]
.   .   .   .   .   Child: 1  Break [line: 37]
.   .   .   .   Sibling: 2  Call wallace: type void [line: 38]
.   .   .   .   .   Child: 0  Assign -- : type int [line: 38]
.   .   .   .   .   .   Child: 0  Id gromit: type int [line: 38]
.   .   .   .   .   Sibling: 1  Op - : type int [line: 38]
.   .   .   .   .   .   Child: 0  Id were: static type int [line: 38]
.   .   .   .   .   .   Child: 1  Id rabbit: static type int [line: 38]
.   .   .   .   Sibling: 3  Compound [line: 39]
.   .   .   .   .   Child: 0  Var the: type int [line: 40]
.   .   .   .   .   Sibling: 1  Var wrong: type int [line: 40]
.   .   .   .   .   Sibling: 2  Var trousers: type int [line: 40]
.   .   .   .   .   Child: 1  Assign = : type int [line: 42]
.   .   .   .   .   .   Child: 0  Id the: type int [line: 42]
.   .   .   .   .   .   Child: 1  Assign += : type int [line: 42]
.   .   .   .   .   .   .   Child: 0  Id wrong: type int [line: 42]
.   .   .   .   .   .   .   Child: 1  Assign ++ : type int [line: 42]
.   .   .   .   .   .   .   .   Child: 0  Id trousers: type int [line: 42]
.   .   .   .   .   Sibling: 1  If [line: 43]
.   .   .   .   .   .   Child: 0  Op == : type bool [line: 43]
.   .   .   .   .   .   .   Child: 0  Id were: static type int [line: 43]
.   .   .   .   .   .   .   Child: 1  Id rabbit: static type int [line: 43]
.   .   .   .   .   .   Child: 1  Assign = : type int [line: 43]
.   .   .   .   .   .   .   Child: 0  Id were: static type int [line: 43]
.   .   .   .   .   .   .   Child: 1  Assign -- : type int [line: 43]
.   .   .   .   .   .   .   .   Child: 0  Id wrong: type int [line: 43]
.   .   Sibling: 17  Return [line: 46]
Sibling: 2  Func penguin: returns type bool [line: 50]
.   Child: 0  Param Feathers: type char [line: 50]
.   Sibling: 1  Param McGraw: array of type char [line: 50]
.   Sibling: 2  Param moon: type bool [line: 50]
.   Sibling: 3  Param cheese: type bool [line: 50]
.   Sibling: 4  Param launch: type int [line: 50]
.   Child: 1  Compound [line: 51]
.   .   Child: 0  Var tottington: static type char [line: 52]
.   .   .   Child: 0  Const: 'x' : type char [line: 52]
.   .   Sibling: 1  Var Wensleydale: array of type char [line: 53]
.   .   .   Child: 0  Const "cheeeeeese" : array of type char [line: 53]
.   .   Sibling: 2  Var c: type char [line: 54]
.   .   Sibling: 3  Var i: type int [line: 55]
.   .   Child: 1  Assign = : type char [line: 57]
.   .   .   Child: 0  Id tottington: static type char [line: 57]
.   .   .   Child: 1  Id Feathers: type char [line: 57]
.   .   Sibling: 1  Assign = : array of type char [line: 58]
.   .   .   Child: 0  Id McGraw: array of type char [line: 58]
.   .   .   Child: 1  Id Feathers: type char [line: 58]
.   .   Sibling: 2  Assign = : array of type char [line: 59]
.   .   .   Child: 0  Id Wensleydale: array of type char [line: 59]
.   .   .   Child: 1  Id McGraw: array of type char [line: 59]
.   .   Sibling: 3  Assign = : type char [line: 60]
.   .   .   Child: 0  Op [ : type char [line: 60]
.   .   .   .   Child: 0  Id Wensleydale: array of type char [line: 60]
.   .   .   .   Child: 1  Op * : type int [line: 60]
.   .   .   .   .   Child: 0  Id McGraw: array of type char [line: 60]
.   .   .   Child: 1  Const: '*' : type char [line: 60]
.   .   Sibling: 4  Assign = : array of type char [line: 61]
.   .   .   Child: 0  Id McGraw: array of type char [line: 61]
.   .   .   Child: 1  Const "A Matter of Loaf and Death" : array of type char [line: 61]
.   .   Sibling: 5  Compound [line: 63]
.   .   .   Child: 0  Var c: type char [line: 63]
.   .   .   Sibling: 1  Var i: type int [line: 64]
.   .   .   Child: 1  For [line: 66]
.   .   .   .   Child: 0  Var c: type char [line: 66]
.   .   .   .   Child: 1  Id McGraw: array of type char [line: 66]
.   .   .   .   Child: 2  If [line: 66]
.   .   .   .   .   Child: 0  Op == : type bool [line: 66]
.   .   .   .   .   .   Child: 0  Id c: type char [line: 66]
.   .   .   .   .   .   Child: 1  Const: 'f' : type char [line: 66]
.   .   .   .   .   Child: 1  Return [line: 66]
.   .   .   .   .   .   Child: 0  Const true : type bool [line: 66]
.   .   .   Sibling: 1  For [line: 67]
.   .   .   .   Child: 0  Var z: type char [line: 67]
.   .   .   .   Child: 1  Id McGraw: array of type char [line: 67]
.   .   .   .   Child: 2  If [line: 67]
.   .   .   .   .   Child: 0  Op == : type bool [line: 67]
.   .   .   .   .   .   Child: 0  Id c: type char [line: 67]
.   .   .   .   .   .   Child: 1  Const: 'f' : type char [line: 67]
.   .   .   .   .   Child: 1  Return [line: 67]
.   .   .   .   .   .   Child: 0  Const true : type bool [line: 67]
.   .   .   .   .   Child: 2  Return [line: 67]
.   .   .   .   .   .   Child: 0  Const false : type bool [line: 67]
.   .   .   Sibling: 2  For [line: 68]
.   .   .   .   Child: 0  Var i: type char [line: 68]
.   .   .   .   Child: 1  Id McGraw: array of type char [line: 68]
Sibling: 3  Func Wendolene: returns type int [line: 72]
.   Child: 0  Param wool: type int [line: 72]
.   Sibling: 1  Param shaun: type bool [line: 72]
.   Sibling: 2  Param yarn: array of type int [line: 72]
.   Sibling: 3  Param preston: array of type bool [line: 72]
.   Child: 1  Compound [line: 73]
.   .   Child: 0  Var void: type int [line: 74]
.   .   Child: 1  Return [line: 75]
.   .   .   Child: 0  Op + : type int [line: 75]
.   .   .   .   Child: 0  Op + : type int [line: 75]
.   .   .   .   .   Child: 0  Op + : type int [line: 75]
.   .   .   .   .   .   Child: 0  Id wool: type int [line: 75]
.   .   .   .   .   .   Child: 1  Op [ : type int [line: 75]
.   .   .   .   .   .   .   Child: 0  Id yarn: array of type int [line: 75]
.   .   .   .   .   .   .   Child: 1  Const 0 : type int [line: 75]
.   .   .   .   .   Child: 1  Op * : type int [line: 75]
.   .   .   .   .   .   Child: 0  Id yarn: array of type int [line: 75]
.   .   .   .   Child: 1  Op [ : type int [line: 75]
.   .   .   .   .   Child: 0  Id yarn: array of type int [line: 75]
.   .   .   .   .   Child: 1  Op * : type int [line: 75]
.   .   .   .   .   .   Child: 0  Const 7 : type int [line: 75]
.   .   .   .   .   .   Child: 1  Id wool: type int [line: 75]
Sibling: 4  Func ramsBottom: returns type bool [line: 79]
.   Child: 1  Compound [line: 80]
.   .   Child: 0  Var chicken: array of type int [line: 81]
.   .   Sibling: 1  Var run: array of type bool [line: 82]
.   .   Sibling: 2  Var wallace: array of type int [line: 83]
.   .   Sibling: 3  Var gromit: array of type int [line: 83]
.   .   Child: 1  Op * : type int [line: 85]
.   .   .   Child: 0  Const 42 : type int [line: 85]
.   .   .   Child: 1  Call Wendolene: type int [line: 85]
.   .   .   .   Child: 0  Op + : type int [line: 85]
.   .   .   .   .   Child: 0  Op + : type int [line: 85]
.   .   .   .   .   .   Child: 0  Const 1 : type int [line: 85]
.   .   .   .   .   .   Child: 1  Const 2 : type int [line: 85]
.   .   .   .   .   Child: 1  Const 3 : type int [line: 85]
.   .   .   .   Sibling: 1  Op | : type bool [line: 85]
.   .   .   .   .   Child: 0  Op ! : type bool [line: 85]
.   .   .   .   .   .   Child: 0  Const true : type bool [line: 85]
.   .   .   .   .   Child: 1  Op & : type bool [line: 85]
.   .   .   .   .   .   Child: 0  Const true : type bool [line: 85]
.   .   .   .   .   .   Child: 1  Const false : type bool [line: 85]
.   .   .   .   Sibling: 2  Id chicken: array of type int [line: 85]
.   .   .   .   Sibling: 3  Id run: array of type bool [line: 85]
.   .   Sibling: 1  Op [ : type bool [line: 86]
.   .   .   Child: 0  Id run: array of type bool [line: 86]
.   .   .   Child: 1  Op - : type int [line: 86]
.   .   .   .   Child: 0  Op * : type int [line: 86]
.   .   .   .   .   Child: 0  Id run: array of type bool [line: 86]
.   .   .   .   Child: 1  Const 1 : type int [line: 86]
.   .   Sibling: 2  Return [line: 88]
.   .   .   Child: 0  Op ! : type bool [line: 88]
.   .   .   .   Child: 0  Op >= : type bool [line: 88]
.   .   .   .   .   Child: 0  Op [ : type int [line: 88]
.   .   .   .   .   .   Child: 0  Id wallace: array of type int [line: 88]
.   .   .   .   .   .   Child: 1  Const 1 : type int [line: 88]
.   .   .   .   .   Child: 1  Op * : type int [line: 88]
.   .   .   .   .   .   Child: 0  Op - : type int [line: 88]
.   .   .   .   .   .   .   Child: 0  Op [ : type int [line: 88]
.   .   .   .   .   .   .   .   Child: 0  Id gromit: array of type int [line: 88]
.   .   .   .   .   .   .   .   Child: 1  Const 2 : type int [line: 88]
.   .   .   .   .   .   Child: 1  Const 3 : type int [line: 88]
Sibling: 5  Func cheese: returns type int [line: 91]
.   Child: 0  Param x: type int [line: 91]
.   Sibling: 1  Param y: type int [line: 91]
.   Child: 1  While [line: 91]
.   .   Child: 0  Op > : type bool [line: 91]
.   .   .   Child: 0  Id x: type int [line: 91]
.   .   .   Child: 1  Const 0 : type int [line: 91]
.   .   Child: 1  If [line: 91]
.   .   .   Child: 0  Op > : type bool [line: 91]
.   .   .   .   Child: 0  Id y: type int [line: 91]
.   .   .   .   Child: 1  Const 3 : type int [line: 91]
.   .   .   Child: 1  Assign -- : type int [line: 91]
.   .   .   .   Child: 0  Id x: type int [line: 91]
.   .   .   Child: 2  Return [line: 91]
.   .   .   .   Child: 0  Op % : type int [line: 91]
.   .   .   .   .   Child: 0  Op * : type int [line: 91]
.   .   .   .   .   .   Child: 0  Id x: type int [line: 91]
.   .   .   .   .   .   Child: 1  Id x: type int [line: 91]
.   .   .   .   .   Child: 1  Id y: type int [line: 91]
Sibling: 6  Func Wensleydale: returns type int [line: 93]
.   Child: 0  Param x: type int [line: 93]
.   Sibling: 1  Param y: type int [line: 93]
.   Child: 1  Return [line: 93]
.   .   Child: 0  Call cheese: type int [line: 93]
.   .   .   Child: 0  Id x: type int [line: 93]
.   .   .   Sibling: 1  Id gromit: type int [line: 93]
Sibling: 7  Func TheWereRabbit: returns type char [line: 95]
.   Child: 0  Param x: type int [line: 95]
.   Child: 1  Compound [line: 96]
.   .   Child: 1  If [line: 97]
.   .   .   Child: 0  Op == : type bool [line: 97]
.   .   .   .   Child: 0  Id x: type int [line: 97]
.   .   .   .   Child: 1  Const 0 : type int [line: 97]
.   .   .   Child: 1  Return [line: 97]
.   .   .   .   Child: 0  Const: '@' : type char [line: 97]
.   .   .   Child: 2  If [line: 98]
.   .   .   .   Child: 0  Op == : type bool [line: 98]
.   .   .   .   .   Child: 0  Id x: type int [line: 98]
.   .   .   .   .   Child: 1  Const 1 : type int [line: 98]
.   .   .   .   Child: 1  Return [line: 98]
.   .   .   .   .   Child: 0  Const: 'a' : type char [line: 98]
.   .   .   .   Child: 2  If [line: 99]
.   .   .   .   .   Child: 0  Op == : type bool [line: 99]
.   .   .   .   .   .   Child: 0  Id x: type int [line: 99]
.   .   .   .   .   .   Child: 1  Const 2 : type int [line: 99]
.   .   .   .   .   Child: 1  Return [line: 99]
.   .   .   .   .   .   Child: 0  Const: 'b' : type char [line: 99]
.   .   .   .   .   Child: 2  If [line: 100]
.   .   .   .   .   .   Child: 0  Op == : type bool [line: 100]
.   .   .   .   .   .   .   Child: 0  Id x: type int [line: 100]
.   .   .   .   .   .   .   Child: 1  Const 3 : type int [line: 100]
.   .   .   .   .   .   Child: 1  Return [line: 100]
.   .   .   .   .   .   .   Child: 0  Const: 'c' : type char [line: 100]
.   .   .   .   .   .   Child: 2  If [line: 101]
.   .   .   .   .   .   .   Child: 0  Op == : type bool [line: 101]
.   .   .   .   .   .   .   .   Child: 0  Id x: type int [line: 101]
.   .   .   .   .   .   .   .   Child: 1  Const 4 : type int [line: 101]
.   .   .   .   .   .   .   Child: 1  Return [line: 101]
.   .   .   .   .   .   .   .   Child: 0  Const: 'd' : type char [line: 101]
.   .   .   .   .   .   .   Child: 2  Return [line: 102]
.   .   .   .   .   .   .   .   Child: 0  Const: ' ' : type char [line: 102]
Sibling: 8  Func main: returns type int [line: 106]
.   Child: 1  Compound [line: 107]
.   .   Child: 0  Var wool: type int [line: 108]
.   .   Sibling: 1  Var yarn: array of type int [line: 108]
.   .   Sibling: 2  Var shaun: type bool [line: 109]
.   .   Sibling: 3  Var preston: array of type bool [line: 109]
.   .   Child: 1  Call wallace: type void [line: 111]
.   .   .   Child: 0  Call cheese: type int [line: 111]
.   .   .   .   Child: 0  Const 62 : type int [line: 111]
.   .   .   .   Sibling: 1  Op - : type int [line: 111]
.   .   .   .   .   Child: 0  Const 311 : type int [line: 111]
.   .   .   Sibling: 1  Id gromit: type int [line: 111]
.   .   Sibling: 1  Return [line: 112]
.   .   .   Child: 0  Call Wendolene: type int [line: 112]
.   .   .   .   Child: 0  Op * : type int [line: 112]
.   .   .   .   .   Child: 0  Op * : type int [line: 112]
.   .   .   .   .   .   Child: 0  Id preston: array of type bool [line: 112]
.   .   .   .   .   Child: 1  Op * : type int [line: 112]
.   .   .   .   .   .   Child: 0  Id yarn: array of type int [line: 112]
.   .   .   .   Sibling: 1  Id shaun: type bool [line: 112]
.   .   .   .   Sibling: 2  Id yarn: array of type int [line: 112]
.   .   .   .   Sibling: 3  Id preston: array of type bool [line: 112]
Sibling: 9  Var aReallyVeryBigSuperLongVariableName6: type bool [line: 115]
Sibling: 10  Var odd: type int [line: 116]
Sibling: 11  Var separation: type int [line: 116]
Sibling: 12  Var of: type int [line: 116]
Sibling: 13  Var stuff: type int [line: 117]
Sibling: 14  Var ant: array of type char [line: 119]
.   Child: 0  Const ""'" : array of type char [line: 119]
Sibling: 15  Var bat: type char [line: 120]
.   Child: 0  Const "'" : array of type char [line: 120]
Sibling: 16  Var cat: array of type char [line: 121]
.   Child: 0  Const "t
 \" : array of type char [line: 121]
Sibling: 17  Var dog: type char [line: 122]
.   Child: 0  Const: 't' : type char [line: 122]
Sibling: 18  Var then: type int [line: 123]
Sibling: 19  Var elsif: type int [line: 123]
Sibling: 20  Var loop: type int [line: 123]
Sibling: 21  Var forever: type int [line: 123]
Number of warnings: 22
Number of errors: 1
Warning: everythingF20.dot: syntax error in line 2502 near '''
