====================================
FILE: allgood.c-
WARNING(40): Variable aa may be uninitialized when used here.
WARNING(41): Variable b may be uninitialized when used here.
WARNING(42): Variable c may be uninitialized when used here.
ERROR(45): Unary '?' requires an operand of type int but was given type char.
ERROR(45): The operation '?' does not work with arrays.
WARNING(70): Variable i may be uninitialized when used here.
Func ant: returns type int [line: 1]
.   Child: 1  Return [line: 1]
.   .   Child: 0  Const 111 : type int [line: 1]
Sibling: 1  Func bat: returns type void [line: 2]
.   Child: 0  Param a: type int [line: 2]
.   Sibling: 1  Param c: type char [line: 2]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var b: type bool [line: 3]
.   .   Child: 1  Assign = : type int [line: 5]
.   .   .   Child: 0  Id a: type int [line: 5]
.   .   .   Child: 1  Const 222 : type int [line: 5]
.   .   Sibling: 1  Assign = : type bool [line: 6]
.   .   .   Child: 0  Id b: type bool [line: 6]
.   .   .   Child: 1  Const true : type bool [line: 6]
.   .   Sibling: 2  Assign = : type char [line: 7]
.   .   .   Child: 0  Id c: type char [line: 7]
.   .   .   Child: 1  Const: 'z' : type char [line: 7]
.   .   Sibling: 3  If [line: 9]
.   .   .   Child: 0  Op > : type bool [line: 9]
.   .   .   .   Child: 0  Id a: type int [line: 9]
.   .   .   .   Child: 1  Const 222 : type int [line: 9]
.   .   .   Child: 1  Const 333 : type int [line: 9]
.   .   Sibling: 4  If [line: 10]
.   .   .   Child: 0  Op < : type bool [line: 10]
.   .   .   .   Child: 0  Id a: type int [line: 10]
.   .   .   .   Child: 1  Const 333 : type int [line: 10]
.   .   .   Child: 1  Const 444 : type int [line: 10]
.   .   .   Child: 2  Const 555 : type int [line: 10]
.   .   Sibling: 5  If [line: 11]
.   .   .   Child: 0  Op <= : type bool [line: 11]
.   .   .   .   Child: 0  Id a: type int [line: 11]
.   .   .   .   Child: 1  Const 666 : type int [line: 11]
.   .   .   Child: 1  If [line: 11]
.   .   .   .   Child: 0  Op >= : type bool [line: 11]
.   .   .   .   .   Child: 0  Id a: type int [line: 11]
.   .   .   .   .   Child: 1  Const 777 : type int [line: 11]
.   .   .   .   Child: 1  Const 888 : type int [line: 11]
.   .   .   .   Child: 2  Const 555 : type int [line: 11]
.   .   Sibling: 6  While [line: 12]
.   .   .   Child: 0  Op == : type bool [line: 12]
.   .   .   .   Child: 0  Const 999 : type int [line: 12]
.   .   .   .   Child: 1  Id a: type int [line: 12]
.   .   .   Child: 1  Const 1010 : type int [line: 12]
.   .   Sibling: 7  If [line: 13]
.   .   .   Child: 0  Id b: type bool [line: 13]
.   .   .   Child: 1  If [line: 13]
.   .   .   .   Child: 0  Op ! : type bool [line: 13]
.   .   .   .   .   Child: 0  Id b: type bool [line: 13]
.   .   .   .   Child: 1  While [line: 13]
.   .   .   .   .   Child: 0  Op & : type bool [line: 13]
.   .   .   .   .   .   Child: 0  Id b: type bool [line: 13]
.   .   .   .   .   .   Child: 1  Const true : type bool [line: 13]
.   .   .   .   .   Child: 1  Const 1111 : type int [line: 13]
.   .   .   .   Child: 2  Const 1212 : type int [line: 13]
.   .   Sibling: 8  If [line: 14]
.   .   .   Child: 0  Id b: type bool [line: 14]
.   .   .   Child: 1  If [line: 14]
.   .   .   .   Child: 0  Op ! : type bool [line: 14]
.   .   .   .   .   Child: 0  Id b: type bool [line: 14]
.   .   .   .   Child: 1  While [line: 14]
.   .   .   .   .   Child: 0  Op | : type bool [line: 14]
.   .   .   .   .   .   Child: 0  Id b: type bool [line: 14]
.   .   .   .   .   .   Child: 1  Const true : type bool [line: 14]
.   .   .   .   .   Child: 1  Const 1313 : type int [line: 14]
.   .   .   .   Child: 2  Const 1414 : type int [line: 14]
.   .   .   Child: 2  Const 1515 : type int [line: 14]
.   .   Sibling: 9  If [line: 15]
.   .   .   Child: 0  Assign = : type bool [line: 15]
.   .   .   .   Child: 0  Id b: type bool [line: 15]
.   .   .   .   Child: 1  Const true : type bool [line: 15]
.   .   .   Child: 1  Const 1616 : type int [line: 15]
.   .   Sibling: 10  While [line: 17]
.   .   .   Child: 0  Const false : type bool [line: 17]
.   .   .   Child: 1  Break [line: 17]
.   .   Sibling: 11  Op + : type int [line: 19]
.   .   .   Child: 0  Id a: type int [line: 19]
.   .   .   Child: 1  Const 1717 : type int [line: 19]
.   .   Sibling: 12  Op - : type int [line: 20]
.   .   .   Child: 0  Const 1818 : type int [line: 20]
.   .   .   Child: 1  Id a: type int [line: 20]
.   .   Sibling: 13  Op * : type int [line: 21]
.   .   .   Child: 0  Id a: type int [line: 21]
.   .   .   Child: 1  Const 1919 : type int [line: 21]
.   .   Sibling: 14  Op / : type int [line: 22]
.   .   .   Child: 0  Const 2020 : type int [line: 22]
.   .   .   Child: 1  Id a: type int [line: 22]
.   .   Sibling: 15  Op % : type int [line: 23]
.   .   .   Child: 0  Id a: type int [line: 23]
.   .   .   Child: 1  Const 2121 : type int [line: 23]
.   .   Sibling: 16  Assign += : type int [line: 25]
.   .   .   Child: 0  Id a: type int [line: 25]
.   .   .   Child: 1  Const 1 : type int [line: 25]
.   .   Sibling: 17  Assign -= : type int [line: 26]
.   .   .   Child: 0  Id a: type int [line: 26]
.   .   .   Child: 1  Const 2 : type int [line: 26]
.   .   Sibling: 18  Assign *= : type int [line: 27]
.   .   .   Child: 0  Id a: type int [line: 27]
.   .   .   Child: 1  Const 3 : type int [line: 27]
.   .   Sibling: 19  Assign /= : type int [line: 28]
.   .   .   Child: 0  Id a: type int [line: 28]
.   .   .   Child: 1  Const 4 : type int [line: 28]
.   .   Sibling: 20  Op - : type int [line: 30]
.   .   .   Child: 0  Id a: type int [line: 30]
.   .   Sibling: 21  Op ! : type bool [line: 31]
.   .   .   Child: 0  Id b: type bool [line: 31]
.   .   Sibling: 22  Op ? : type int [line: 32]
.   .   .   Child: 0  Id a: type int [line: 32]
Sibling: 2  Func cat: returns type char [line: 35]
.   Child: 1  Compound [line: 36]
.   .   Child: 0  Var a: type int [line: 37]
.   .   Sibling: 1  Var b: type bool [line: 37]
.   .   Sibling: 2  Var c: type char [line: 37]
.   .   Sibling: 3  Var aa: array of type int [line: 38]
.   .   Sibling: 4  Var ba: array of type bool [line: 38]
.   .   Sibling: 5  Var ca: array of type char [line: 38]
.   .   Child: 1  Op [ : type int [line: 40]
.   .   .   Child: 0  Id aa: array of type int [line: 40]
.   .   .   Child: 1  Const 2 : type int [line: 40]
.   .   Sibling: 1  Assign = : type bool [line: 41]
.   .   .   Child: 0  Op [ : type bool [line: 41]
.   .   .   .   Child: 0  Id ba: array of type bool [line: 41]
.   .   .   .   Child: 1  Id a: type int [line: 41]
.   .   .   Child: 1  Id b: type bool [line: 41]
.   .   Sibling: 2  Assign = : type char [line: 42]
.   .   .   Child: 0  Op [ : type char [line: 42]
.   .   .   .   Child: 0  Id ca: array of type char [line: 42]
.   .   .   .   Child: 1  Op [ : type int [line: 42]
.   .   .   .   .   Child: 0  Id aa: array of type int [line: 42]
.   .   .   .   .   Child: 1  Const 1 : type int [line: 42]
.   .   .   Child: 1  Id c: type char [line: 42]
.   .   Sibling: 3  Op * : type int [line: 44]
.   .   .   Child: 0  Id ba: array of type bool [line: 44]
.   .   Sibling: 4  Op ? : type char [line: 45]
.   .   .   Child: 0  Id ca: array of type char [line: 45]
.   .   Sibling: 5  For [line: 47]
.   .   .   Child: 0  Var z: undefined type [line: 47]
.   .   .   Child: 1  Id aa: array of type int [line: 47]
.   .   .   Child: 2  Op + : type int [line: 47]
.   .   .   .   Child: 0  Id z: undefined type [line: 47]
.   .   .   .   Child: 1  Id z: undefined type [line: 47]
.   .   Sibling: 6  For [line: 48]
.   .   .   Child: 0  Var z: undefined type [line: 48]
.   .   .   Child: 1  Id ba: array of type bool [line: 48]
.   .   .   Child: 2  Op & : type bool [line: 48]
.   .   .   .   Child: 0  Id z: undefined type [line: 48]
.   .   .   .   Child: 1  Id z: undefined type [line: 48]
.   .   Sibling: 7  For [line: 49]
.   .   .   Child: 0  Var z: undefined type [line: 49]
.   .   .   Child: 1  Id ca: array of type char [line: 49]
.   .   .   Child: 2  Compound [line: 49]
.   .   .   .   Child: 1  Assign = : type char [line: 50]
.   .   .   .   .   Child: 0  Id c: type char [line: 50]
.   .   .   .   .   Child: 1  Id z: undefined type [line: 50]
.   .   .   .   Sibling: 1  Assign = : undefined type [line: 51]
.   .   .   .   .   Child: 0  Id z: undefined type [line: 51]
.   .   .   .   .   Child: 1  Id c: type char [line: 51]
.   .   Sibling: 8  Assign = : array of type int [line: 54]
.   .   .   Child: 0  Id aa: array of type int [line: 54]
.   .   .   Child: 1  Id aa: array of type int [line: 54]
.   .   Sibling: 9  Op == : type bool [line: 55]
.   .   .   Child: 0  Id ba: array of type bool [line: 55]
.   .   .   Child: 1  Id ba: array of type bool [line: 55]
.   .   Sibling: 10  Op != : type bool [line: 56]
.   .   .   Child: 0  Id ca: array of type char [line: 56]
.   .   .   Child: 1  Id ca: array of type char [line: 56]
.   .   Sibling: 11  Op > : type bool [line: 57]
.   .   .   Child: 0  Id aa: array of type int [line: 57]
.   .   .   Child: 1  Id aa: array of type int [line: 57]
.   .   Sibling: 12  Op >= : type bool [line: 58]
.   .   .   Child: 0  Id ba: array of type bool [line: 58]
.   .   .   Child: 1  Id ba: array of type bool [line: 58]
.   .   Sibling: 13  Op < : type bool [line: 59]
.   .   .   Child: 0  Id ca: array of type char [line: 59]
.   .   .   Child: 1  Id ca: array of type char [line: 59]
.   .   Sibling: 14  Op <= : type bool [line: 60]
.   .   .   Child: 0  Id aa: array of type int [line: 60]
.   .   .   Child: 1  Id aa: array of type int [line: 60]
.   .   Sibling: 15  Assign = : array of type char [line: 62]
.   .   .   Child: 0  Id ca: array of type char [line: 62]
.   .   .   Child: 1  Const "dogs are great" : array of type char [line: 62]
.   .   Sibling: 16  Return [line: 64]
.   .   .   Child: 0  Const: 'm' : type char [line: 64]
Sibling: 3  Func dog: returns type void [line: 67]
.   Child: 0  Param i: type int [line: 67]
.   Child: 1  If [line: 68]
.   .   Child: 0  Op == : type bool [line: 68]
.   .   .   Child: 0  Id i: type int [line: 68]
.   .   .   Child: 1  Const 3 : type int [line: 68]
.   .   Child: 1  Compound [line: 68]
.   .   .   Child: 0  Var i: type int [line: 69]
.   .   .   Child: 1  Assign = : type int [line: 70]
.   .   .   .   Child: 0  Id i: type int [line: 70]
.   .   .   .   Child: 1  Id i: type int [line: 70]
Sibling: 4  Func main: returns type int [line: 73]
.   Child: 1  Compound [line: 74]
.   .   Child: 0  Var bbb: static type bool [line: 75]
.   .   Sibling: 1  Var ccc: static array of type char [line: 76]
.   .   Child: 1  Call ant: type int [line: 78]
.   .   Sibling: 1  Call bat: type void [line: 79]
.   .   .   Child: 0  Const 676 : type int [line: 79]
.   .   .   Sibling: 1  Const: 'g' : type char [line: 79]
.   .   Sibling: 2  Call cat: type char [line: 80]
.   .   Sibling: 3  Call bat: type void [line: 81]
.   .   .   Child: 0  Call ant: type int [line: 81]
.   .   .   Sibling: 1  Call cat: type char [line: 81]
.   .   Sibling: 4  Assign = : type bool [line: 82]
.   .   .   Child: 0  Id bbb: static type bool [line: 82]
.   .   .   Child: 1  Op != : type bool [line: 82]
.   .   .   .   Child: 0  Op [ : type char [line: 82]
.   .   .   .   .   Child: 0  Id ccc: static array of type char [line: 82]
.   .   .   .   .   Child: 1  Const 2 : type int [line: 82]
.   .   .   .   Child: 1  Const: 'r' : type char [line: 82]
.   .   Sibling: 5  Return [line: 84]
.   .   .   Child: 0  Op + : type int [line: 84]
.   .   .   .   Child: 0  Call ant: type int [line: 84]
.   .   .   .   Child: 1  Const 807 : type int [line: 84]
Number of warnings: 4
Number of errors: 2
