cat test.c- | ./c-
Line 1 Token: CHAR
Line 1 Token: ID Value: zev
Line 1 Token: [
Line 1 Token: NUMCONST Value: 10  Input: 10
Line 1 Token: ]
Line 1 Token: :
Line 1 Token: STRINGCONST Value: "corgis"  Input: "corgis"
Line 1 Token: ;
Line 2 Token: CHAR
Line 2 Token: ID Value: yurt
Line 2 Token: [
Line 2 Token: NUMCONST Value: 20  Input: 20
Line 2 Token: ]
Line 2 Token: ;
Line 3 Token: INT
Line 3 Token: ID Value: x
Line 3 Token: :
Line 3 Token: NUMCONST Value: 42  Input: 42
Line 3 Token: ,
Line 3 Token: ID Value: y
Line 3 Token: :
Line 3 Token: NUMCONST Value: 666  Input: 666
Line 3 Token: ;
Line 5 Token: INT
Line 5 Token: ID Value: ant
Line 5 Token: (
Line 5 Token: INT
Line 5 Token: ID Value: bat
Line 5 Token: ,
Line 5 Token: ID Value: cat
Line 5 Token: [
Line 5 Token: ]
Line 5 Token: ;
Line 5 Token: BOOL
Line 5 Token: ID Value: dog
Line 5 Token: ,
Line 5 Token: ID Value: elk
Line 5 Token: ;
Line 5 Token: INT
Line 5 Token: ID Value: fox
Line 5 Token: ;
Line 5 Token: CHAR
Line 5 Token: ID Value: gun
Line 5 Token: )
Line 5 Token: {
Line 6 Token: INT
Line 6 Token: ID Value: goat
Line 6 Token: ,
Line 6 Token: ID Value: hog
Line 6 Token: [
Line 6 Token: NUMCONST Value: 100  Input: 100
Line 6 Token: ]
Line 6 Token: ;
Line 7 Token: ID Value: gnu
Line 7 Token: =
Line 7 Token: CHARCONST Value: 'W' Input: 'W'
Line 7 Token: ;
Line 8 Token: ID Value: goat
Line 8 Token: =
Line 8 Token: ID Value: hog
Line 8 Token: [
Line 8 Token: NUMCONST Value: 2  Input: 2
Line 8 Token: ]
Line 8 Token: =
Line 8 Token: NUMCONST Value: 3  Input: 3
Line 8 Token: *
Line 8 Token: *
Line 8 Token: ID Value: cat
Line 8 Token: ;
Line 9 Token: IF
Line 9 Token: (
Line 9 Token: ID Value: dog
Line 9 Token: ID Value: and
Line 9 Token: ID Value: elk
Line 9 Token: ID Value: or
Line 9 Token: ID Value: bat
Line 9 Token: >
Line 9 Token: ID Value: cat
Line 9 Token: [
Line 9 Token: NUMCONST Value: 3  Input: 3
Line 9 Token: ]
Line 9 Token: )
Line 9 Token: ID Value: dog
Line 9 Token: =
Line 9 Token: ID Value: not
Line 9 Token: ID Value: dog
Line 9 Token: ;
Line 10 Token: ID Value: fox
Line 10 Token: INC
Line 10 Token: ;
Line 11 Token: IF
Line 11 Token: (
Line 11 Token: ID Value: bat
Line 11 Token: LEQ
Line 11 Token: ID Value: fox
Line 11 Token: )
Line 11 Token: {
Line 12 Token: WHILE
Line 12 Token: (
Line 12 Token: ID Value: dog
Line 12 Token: )
Line 12 Token: {
Line 13 Token: STATIC
Line 13 Token: INT
Line 13 Token: ID Value: hog
Line 13 Token: ;
Line 14 Token: ID Value: hog
Line 14 Token: =
Line 14 Token: ID Value: fox
Line 14 Token: ;
Line 15 Token: ID Value: dog
Line 15 Token: =
Line 15 Token: ID Value: fred
Line 15 Token: (
Line 15 Token: ID Value: fox
Line 15 Token: INC
Line 15 Token: ,
Line 15 Token: ID Value: cat
Line 15 Token: )
Line 15 Token: >
Line 15 Token: NUMCONST Value: 666  Input: 666
Line 15 Token: ;
Line 16 Token: IF
Line 16 Token: (
Line 16 Token: ID Value: hog
Line 16 Token: >
Line 16 Token: ID Value: bat
Line 16 Token: )
Line 16 Token: BREAK
Line 16 Token: ;
Line 17 Token: IF
Line 17 Token: (
Line 17 Token: ID Value: fox
Line 17 Token: NEQ
Line 17 Token: NUMCONST Value: 0  Input: 0
Line 17 Token: )
Line 17 Token: ID Value: fox
Line 17 Token: ADDASS
Line 17 Token: NUMCONST Value: 7  Input: 7
Line 17 Token: ;
Line 18 Token: }
Line 19 Token: }
Line 20 Token: FOR
Line 20 Token: (
Line 20 Token: ID Value: c
Line 20 Token: IN
Line 20 Token: ID Value: zev
Line 20 Token: )
Line 20 Token: ID Value: outputc
Line 20 Token: (
Line 20 Token: ID Value: c
Line 20 Token: )
Line 20 Token: ;
Line 21 Token: IF
Line 21 Token: (
Line 21 Token: ID Value: zev
Line 21 Token: >
Line 21 Token: STRINGCONST Value: "dog"  Input: "dog"
Line 21 Token: )
Line 21 Token: ID Value: outputs
Line 21 Token: (
Line 21 Token: STRINGCONST Value: "bark"  Input: "bark"
Line 21 Token: )
Line 21 Token: ;
Line 22 Token: ID Value: yurt
Line 22 Token: =
Line 22 Token: ID Value: zev
Line 22 Token: ;
Line 23 Token: ID Value: yurt
Line 23 Token: [
Line 23 Token: NUMCONST Value: 3  Input: 3
Line 23 Token: ]
Line 23 Token: =
Line 23 Token: ?
Line 23 Token: ID Value: zev
Line 23 Token: ;
Line 24 Token: RETURN
Line 24 Token: (
Line 24 Token: ID Value: fox
Line 24 Token: +
Line 24 Token: ID Value: bat
Line 24 Token: *
Line 24 Token: ID Value: cat
Line 24 Token: [
Line 24 Token: ID Value: bat
Line 24 Token: ]
Line 24 Token: )
Line 24 Token: /
Line 24 Token: -
Line 24 Token: ID Value: fox
Line 24 Token: ;
Line 25 Token: }
Line 27 Token: INT
Line 27 Token: ID Value: max
Line 27 Token: (
Line 27 Token: INT
Line 27 Token: ID Value: a
Line 27 Token: ,
Line 27 Token: ID Value: b
Line 27 Token: )
Line 27 Token: IF
Line 27 Token: (
Line 27 Token: ID Value: a
Line 27 Token: >
Line 27 Token: ID Value: b
Line 27 Token: )
Line 27 Token: RETURN
Line 27 Token: ID Value: a
Line 27 Token: ;
